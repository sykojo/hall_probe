
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000005c  08003a38  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08003a38  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d996  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002746  00000000  00000000  0002da5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  000301a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c9  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6e5  00000000  00000000  00031821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012260  00000000  00000000  0004bf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094e77  00000000  00000000  0005e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f4  00000000  00000000  000f2fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f65d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003990 	.word	0x08003990

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08003990 	.word	0x08003990

08000224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_DMA_Init+0x38>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <MX_DMA_Init+0x38>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_DMA_Init+0x38>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	203b      	movs	r0, #59	; 0x3b
 8000248:	f001 f9c7 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800024c:	203b      	movs	r0, #59	; 0x3b
 800024e:	f001 f9e0 	bl	8001612 <HAL_NVIC_EnableIRQ>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b42      	ldr	r3, [pc, #264]	; (8000380 <MX_GPIO_Init+0x120>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a41      	ldr	r2, [pc, #260]	; (8000380 <MX_GPIO_Init+0x120>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b3f      	ldr	r3, [pc, #252]	; (8000380 <MX_GPIO_Init+0x120>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <MX_GPIO_Init+0x120>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a3b      	ldr	r2, [pc, #236]	; (8000380 <MX_GPIO_Init+0x120>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b39      	ldr	r3, [pc, #228]	; (8000380 <MX_GPIO_Init+0x120>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	4b36      	ldr	r3, [pc, #216]	; (8000380 <MX_GPIO_Init+0x120>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a35      	ldr	r2, [pc, #212]	; (8000380 <MX_GPIO_Init+0x120>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b33      	ldr	r3, [pc, #204]	; (8000380 <MX_GPIO_Init+0x120>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002bc:	4b30      	ldr	r3, [pc, #192]	; (8000380 <MX_GPIO_Init+0x120>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <MX_GPIO_Init+0x120>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_GPIO_Init+0x120>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0308 	and.w	r3, r3, #8
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2170      	movs	r1, #112	; 0x70
 80002d8:	482a      	ldr	r0, [pc, #168]	; (8000384 <MX_GPIO_Init+0x124>)
 80002da:	f001 fdfb 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f241 4104 	movw	r1, #5124	; 0x1404
 80002e4:	4828      	ldr	r0, [pc, #160]	; (8000388 <MX_GPIO_Init+0x128>)
 80002e6:	f001 fdf5 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCTS_Pin|NRTS_Pin|UART_RESET__Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 7160 	mov.w	r1, #896	; 0x380
 80002f0:	4824      	ldr	r0, [pc, #144]	; (8000384 <MX_GPIO_Init+0x124>)
 80002f2:	f001 fdef 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RI__GPIO_Port, RI__Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fc:	4823      	ldr	r0, [pc, #140]	; (800038c <MX_GPIO_Init+0x12c>)
 80002fe:	f001 fde9 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin|NCTS_Pin
 8000302:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000306:	613b      	str	r3, [r7, #16]
                          |NRTS_Pin|UART_RESET__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <MX_GPIO_Init+0x124>)
 800031c:	f001 fc46 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 8000320:	f241 4304 	movw	r3, #5124	; 0x1404
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4813      	ldr	r0, [pc, #76]	; (8000388 <MX_GPIO_Init+0x128>)
 800033a:	f001 fc37 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RI__Pin;
 800033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RI__GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <MX_GPIO_Init+0x12c>)
 8000358:	f001 fc28 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800035c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_GPIO_Init+0x128>)
 8000372:	f001 fc1b 	bl	8001bac <HAL_GPIO_Init>

}
 8000376:	bf00      	nop
 8000378:	3720      	adds	r7, #32
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40011000 	.word	0x40011000
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40010800 	.word	0x40010800

08000390 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_I2C1_Init+0x50>)
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <MX_I2C1_Init+0x54>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_I2C1_Init+0x50>)
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_I2C1_Init+0x58>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_I2C1_Init+0x50>)
 80003ce:	f001 fdb3 	bl	8001f38 <HAL_I2C_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003d8:	f000 f9a4 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000078 	.word	0x20000078
 80003e4:	40005400 	.word	0x40005400
 80003e8:	000186a0 	.word	0x000186a0

080003ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <HAL_I2C_MspInit+0x70>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d123      	bne.n	8000454 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_I2C_MspInit+0x74>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <HAL_I2C_MspInit+0x74>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_I2C_MspInit+0x74>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000424:	23c0      	movs	r3, #192	; 0xc0
 8000426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000428:	2312      	movs	r3, #18
 800042a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042c:	2303      	movs	r3, #3
 800042e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <HAL_I2C_MspInit+0x78>)
 8000438:	f001 fbb8 	bl	8001bac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <HAL_I2C_MspInit+0x74>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_I2C_MspInit+0x74>)
 8000442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000446:	61d3      	str	r3, [r2, #28]
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_I2C_MspInit+0x74>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40005400 	.word	0x40005400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010c00 	.word	0x40010c00

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b0a5      	sub	sp, #148	; 0x94
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 ff57 	bl	8001320 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f911 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f7ff fef3 	bl	8000260 <MX_GPIO_Init>
  MX_DMA_Init();
 800047a:	f7ff fed3 	bl	8000224 <MX_DMA_Init>
  MX_I2C1_Init();
 800047e:	f7ff ff87 	bl	8000390 <MX_I2C1_Init>
  MX_UART4_Init();
 8000482:	f000 fe15 	bl	80010b0 <MX_UART4_Init>
  MX_UART5_Init();
 8000486:	f000 fe3d 	bl	8001104 <MX_UART5_Init>
  MX_SPI1_Init();
 800048a:	f000 fc23 	bl	8000cd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800048e:	f000 fc57 	bl	8000d40 <MX_SPI2_Init>
//			  //HAL_Delay(10);
//			  i++;
//		  }
//
//	  }
  	  uint16_t conv_status = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  	  uint8_t rdy = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  	  uint8_t dataAreCurrent= 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  	  uint8_t num_of_sensors = 8;
 80004a4:	2308      	movs	r3, #8
 80004a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  	  Sensor* sensors = (Sensor*)malloc(sizeof(Sensor)*num_of_sensors);
 80004aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80004ae:	2264      	movs	r2, #100	; 0x64
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 f915 	bl	80036e4 <malloc>
 80004ba:	4603      	mov	r3, r0
 80004bc:	67fb      	str	r3, [r7, #124]	; 0x7c

  	  sensor_power_on();
 80004be:	f000 f9d7 	bl	8000870 <sensor_power_on>
  	  HAL_Delay(250);
 80004c2:	20fa      	movs	r0, #250	; 0xfa
 80004c4:	f000 ff8e 	bl	80013e4 <HAL_Delay>

  	  deactivateSCLR();
 80004c8:	f000 f9de 	bl	8000888 <deactivateSCLR>
  	  HAL_Delay(250);
 80004cc:	20fa      	movs	r0, #250	; 0xfa
 80004ce:	f000 ff89 	bl	80013e4 <HAL_Delay>

  	  for(int i = 0; i<(num_of_sensors); i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004d8:	e02f      	b.n	800053a <main+0xd2>
  	  {
  		  if(i==3)continue;
 80004da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d025      	beq.n	800052e <main+0xc6>

  		  sensors[i] = sensor_init(i+1);
 80004e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2d9      	uxtb	r1, r3
 80004ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80004f8:	18d4      	adds	r4, r2, r3
 80004fa:	463b      	mov	r3, r7
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f92f 	bl	8000760 <sensor_init>
 8000502:	4620      	mov	r0, r4
 8000504:	463b      	mov	r3, r7
 8000506:	2264      	movs	r2, #100	; 0x64
 8000508:	4619      	mov	r1, r3
 800050a:	f003 f9eb 	bl	80038e4 <memcpy>
  		  if(!(sensors[i].ok))
 800050e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800051a:	4413      	add	r3, r2
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d106      	bne.n	8000530 <main+0xc8>
  		  {
  			  while(1)
  			  {
  				  errorLED();
 8000522:	f000 fbc9 	bl	8000cb8 <errorLED>
  				  HAL_Delay(200);
 8000526:	20c8      	movs	r0, #200	; 0xc8
 8000528:	f000 ff5c 	bl	80013e4 <HAL_Delay>
  				  errorLED();
 800052c:	e7f9      	b.n	8000522 <main+0xba>
  		  if(i==3)continue;
 800052e:	bf00      	nop
  	  for(int i = 0; i<(num_of_sensors); i++)
 8000530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000534:	3301      	adds	r3, #1
 8000536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800053a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800053e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000542:	429a      	cmp	r2, r3
 8000544:	dbc9      	blt.n	80004da <main+0x72>
  		  }
  	  }

	  while(1)
	  {
		  uint8_t flag=0;
 8000546:	2300      	movs	r3, #0
 8000548:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		  for(int i=0;i<(num_of_sensors);i++)
 800054c:	2300      	movs	r3, #0
 800054e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000552:	e097      	b.n	8000684 <main+0x21c>
		  {
			  HAL_UART_Receive(&huart4, &flag, 1, HAL_MAX_DELAY);
 8000554:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2201      	movs	r2, #1
 800055e:	484d      	ldr	r0, [pc, #308]	; (8000694 <main+0x22c>)
 8000560:	f002 ff31 	bl	80033c6 <HAL_UART_Receive>
			  //if(i==3)continue;
			  if(sensors[6].ok)
 8000564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000566:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	2b00      	cmp	r3, #0
 800056e:	f000 8081 	beq.w	8000674 <main+0x20c>
			  {
				  do{
					  conv_status = read_register(&sensors[6], CONV_STATUS);
 8000572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000574:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000578:	2108      	movs	r1, #8
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa2b 	bl	80009d6 <read_register>
 8000580:	4603      	mov	r3, r0
 8000582:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
					  rdy = conv_status&(1<<13) ? 1:0;
 8000586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800058a:	135b      	asrs	r3, r3, #13
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
					  dataAreCurrent= conv_status&(0x07<<8) ? 1:0;
 8000596:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800059a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf14      	ite	ne
 80005a2:	2301      	movne	r3, #1
 80005a4:	2300      	moveq	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
				  }while(!(dataAreCurrent&&rdy));
 80005ac:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0de      	beq.n	8000572 <main+0x10a>
 80005b4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0da      	beq.n	8000572 <main+0x10a>

				  int32_t lsb = (2*RANGE*1000000)/(1<<16); //LSB in nT
 80005bc:	f44f 630f 	mov.w	r3, #2288	; 0x8f0
 80005c0:	67bb      	str	r3, [r7, #120]	; 0x78
				  measuringLED();
 80005c2:	f000 fb6f 	bl	8000ca4 <measuringLED>

				  int16_t x_result = read_register(&sensors[6],X_CH_RESULT);
 80005c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80005cc:	2109      	movs	r1, #9
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa01 	bl	80009d6 <read_register>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				  int16_t y_result = read_register(&sensors[6],Y_CH_RESULT);
 80005da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005dc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80005e0:	210a      	movs	r1, #10
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f9f7 	bl	80009d6 <read_register>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				  int16_t z_result = read_register(&sensors[6],Z_CH_RESULT);
 80005ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80005f4:	210b      	movs	r1, #11
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f9ed 	bl	80009d6 <read_register>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				  sensors[6].measured_data.x_B = ((int32_t)x_result)*lsb;
 8000602:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8000606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000608:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800060c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800060e:	fb01 f202 	mul.w	r2, r1, r2
 8000612:	605a      	str	r2, [r3, #4]
				  sensors[6].measured_data.y_B = ((int32_t)y_result)*lsb;
 8000614:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8000618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800061a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800061e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000620:	fb01 f202 	mul.w	r2, r1, r2
 8000624:	609a      	str	r2, [r3, #8]
				  sensors[6].measured_data.z_B = ((int32_t)z_result)*lsb;
 8000626:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800062a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800062c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000630:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	60da      	str	r2, [r3, #12]

//				  sensors[7].measured_data.x_B = (int32_t)(51);
//				  sensors[7].measured_data.y_B = (int32_t)(52);
//				  sensors[7].measured_data.z_B = (int32_t)(53);

				  uint8_t* message = (uint8_t*)malloc(sizeof(MeasuredData));
 8000638:	200c      	movs	r0, #12
 800063a:	f003 f853 	bl	80036e4 <malloc>
 800063e:	4603      	mov	r3, r0
 8000640:	66fb      	str	r3, [r7, #108]	; 0x6c
				  if(message==NULL) errorLED();
 8000642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <main+0x1e4>
 8000648:	f000 fb36 	bl	8000cb8 <errorLED>
				  memcpy(message,&(sensors[6].measured_data),sizeof(MeasuredData));
 800064c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800064e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000652:	3304      	adds	r3, #4
 8000654:	220c      	movs	r2, #12
 8000656:	4619      	mov	r1, r3
 8000658:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800065a:	f003 f943 	bl	80038e4 <memcpy>
				  HAL_UART_Transmit(&huart4, message, sizeof(MeasuredData), HAL_MAX_DELAY);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	220c      	movs	r2, #12
 8000664:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0x22c>)
 8000668:	f002 fe2a 	bl	80032c0 <HAL_UART_Transmit>
				  free(message);
 800066c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800066e:	f003 f841 	bl	80036f4 <free>
 8000672:	e002      	b.n	800067a <main+0x212>
			  }
			  else
			  {
				  while(1)
				  {
					  errorLED();
 8000674:	f000 fb20 	bl	8000cb8 <errorLED>
 8000678:	e7fc      	b.n	8000674 <main+0x20c>
		  for(int i=0;i<(num_of_sensors);i++)
 800067a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000684:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000688:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800068c:	429a      	cmp	r2, r3
 800068e:	f6ff af61 	blt.w	8000554 <main+0xec>
	  {
 8000692:	e758      	b.n	8000546 <main+0xde>
 8000694:	20000180 	.word	0x20000180

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	; 0x40
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2228      	movs	r2, #40	; 0x28
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f8d8 	bl	800385c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80006c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fd6c 	bl	80021c0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ee:	f000 f819 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2102      	movs	r1, #2
 800070c:	4618      	mov	r0, r3
 800070e:	f001 ffd9 	bl	80026c4 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000718:	f000 f804 	bl	8000724 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3740      	adds	r7, #64	; 0x40
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>

0800072e <writeToRegister>:
#include "spi.h"
#include "spi_handler.h"


void writeToRegister(uint16_t* pRegData,REGISTER_FEATURE pos,uint16_t value)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	460b      	mov	r3, r1
 8000738:	70fb      	strb	r3, [r7, #3]
 800073a:	4613      	mov	r3, r2
 800073c:	803b      	strh	r3, [r7, #0]
        value <<= (uint16_t)pos;
 800073e:	883a      	ldrh	r2, [r7, #0]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	803b      	strh	r3, [r7, #0]
        *pRegData|=value;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	881a      	ldrh	r2, [r3, #0]
 800074c:	883b      	ldrh	r3, [r7, #0]
 800074e:	4313      	orrs	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	801a      	strh	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <sensor_init>:


Sensor sensor_init(uint8_t adr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0ba      	sub	sp, #232	; 0xe8
 8000764:	af02      	add	r7, sp, #8
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
    Sensor sen;
    sen.adr = adr;
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    sen.num_of_axis = 3;
 8000772:	2303      	movs	r3, #3
 8000774:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint8_t crc_disable[4] = {0x0F,0x00,0x04,0x07};
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <sensor_init+0x108>)
 800077a:	67bb      	str	r3, [r7, #120]	; 0x78
    uint8_t reg_data[4] = {0};
 800077c:	2300      	movs	r3, #0
 800077e:	677b      	str	r3, [r7, #116]	; 0x74
    uint16_t realRegValue[4]={0};
 8000780:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]


    select_sensor(sen.adr);
 800078a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa3c 	bl	8000c0c <select_sensor>
    registers_adr_config(&sen);
 8000794:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f8dd 	bl	8000958 <registers_adr_config>
    HAL_SPI_TransmitReceive(&hspi1, crc_disable, reg_data, 4, 50);
 800079e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80007a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80007a6:	2332      	movs	r3, #50	; 0x32
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2304      	movs	r3, #4
 80007ac:	482f      	ldr	r0, [pc, #188]	; (800086c <sensor_init+0x10c>)
 80007ae:	f002 fae0 	bl	8002d72 <HAL_SPI_TransmitReceive>
    HAL_Delay(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fe16 	bl	80013e4 <HAL_Delay>
    deselect_sensor();
 80007b8:	f000 fa4a 	bl	8000c50 <deselect_sensor>

    device_config(&sen);
 80007bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f9a9 	bl	8000b18 <device_config>
    sensor_config(&sen);
 80007c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f9c6 	bl	8000b5c <sensor_config>
    system_config(&sen);
 80007d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9f7 	bl	8000bc8 <system_config>
    realRegValue[0]=read_register(&sen, TEST_CONFIG);
 80007da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007de:	210f      	movs	r1, #15
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f8f8 	bl	80009d6 <read_register>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    realRegValue[1]=read_register(&sen, DEVICE_CONFIG);
 80007ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f8ef 	bl	80009d6 <read_register>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    realRegValue[2]=read_register(&sen, SENSOR_CONFIG);
 80007fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8e6 	bl	80009d6 <read_register>
 800080a:	4603      	mov	r3, r0
 800080c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    realRegValue[3]=read_register(&sen, SYSTEM_CONFIG);
 8000810:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f8dd 	bl	80009d6 <read_register>
 800081c:	4603      	mov	r3, r0
 800081e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    if(registersAreSet(realRegValue))
 8000822:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f953 	bl	8000ad2 <registersAreSet>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00b      	beq.n	800084a <sensor_init+0xea>
    {
    	sen.ok = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    	return sen;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000840:	2264      	movs	r2, #100	; 0x64
 8000842:	4619      	mov	r1, r3
 8000844:	f003 f84e 	bl	80038e4 <memcpy>
 8000848:	e009      	b.n	800085e <sensor_init+0xfe>
    }
    else
    {
    	Sensor error_sensor;
    	error_sensor.ok = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	727b      	strb	r3, [r7, #9]
    	return error_sensor;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2264      	movs	r2, #100	; 0x64
 8000858:	4619      	mov	r1, r3
 800085a:	f003 f843 	bl	80038e4 <memcpy>
    }

}
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	37e0      	adds	r7, #224	; 0xe0
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	0704000f 	.word	0x0704000f
 800086c:	200000cc 	.word	0x200000cc

08000870 <sensor_power_on>:
{
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin,1);
}

void sensor_power_on()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin,0);
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <sensor_power_on+0x14>)
 800087a:	f001 fb2b 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40011000 	.word	0x40011000

08000888 <deactivateSCLR>:
void deactivateSCLR()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLR_GPIO_Port, SCLR_Pin, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2120      	movs	r1, #32
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <deactivateSCLR+0x24>)
 8000892:	f001 fb1f 	bl	8001ed4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000896:	2032      	movs	r0, #50	; 0x32
 8000898:	f000 fda4 	bl	80013e4 <HAL_Delay>
	HAL_GPIO_WritePin(SCLR_GPIO_Port, SCLR_Pin, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	2120      	movs	r1, #32
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <deactivateSCLR+0x24>)
 80008a2:	f001 fb17 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40011000 	.word	0x40011000

080008b0 <calc_crc>:



uint8_t calc_crc(REGISTER_ADR adr,uint16_t* data)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
	uint8_t xor_result;
	uint8_t crc_polynomial=0x13;
 80008bc:	2313      	movs	r3, #19
 80008be:	74fb      	strb	r3, [r7, #19]
	uint8_t crc_reg = 0x0F;
 80008c0:	230f      	movs	r3, #15
 80008c2:	77fb      	strb	r3, [r7, #31]
	uint8_t message[4] = {adr,(*data)>>8,*data,crc_reg};
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	733b      	strb	r3, [r7, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73bb      	strb	r3, [r7, #14]
 80008dc:	7ffb      	ldrb	r3, [r7, #31]
 80008de:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_msb;
	uint8_t msg_msb;
	int j =0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
	for(int i=31;i>=0;i--)
 80008e4:	231f      	movs	r3, #31
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e02a      	b.n	8000940 <calc_crc+0x90>
	{
		crc_msb = crc_reg >> 3;
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	74bb      	strb	r3, [r7, #18]
		msg_msb = (message[j]>>(i%8))&0x01;
 80008f0:	f107 020c 	add.w	r2, r7, #12
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	fa42 f303 	asr.w	r3, r2, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	747b      	strb	r3, [r7, #17]
		xor_result = crc_msb ^ msg_msb;
 800090e:	7cba      	ldrb	r2, [r7, #18]
 8000910:	7c7b      	ldrb	r3, [r7, #17]
 8000912:	4053      	eors	r3, r2
 8000914:	743b      	strb	r3, [r7, #16]
		crc_reg = crc_reg << 1;
 8000916:	7ffb      	ldrb	r3, [r7, #31]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	77fb      	strb	r3, [r7, #31]

		if(xor_result)
 800091c:	7c3b      	ldrb	r3, [r7, #16]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <calc_crc+0x7a>
		{
			crc_reg = crc_reg ^ crc_polynomial;
 8000922:	7ffa      	ldrb	r2, [r7, #31]
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	4053      	eors	r3, r2
 8000928:	77fb      	strb	r3, [r7, #31]
		}

		if((i%8)==0){ j++; }
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <calc_crc+0x8a>
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	3301      	adds	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
	for(int i=31;i>=0;i--)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3b01      	subs	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b00      	cmp	r3, #0
 8000944:	dad1      	bge.n	80008ea <calc_crc+0x3a>
	}
	return crc_reg & 0x0F;
 8000946:	7ffb      	ldrb	r3, [r7, #31]
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <registers_adr_config>:

void registers_adr_config(Sensor* sen)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	sen->TEST_CONFIG.adr = TEST_CONFIG;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	220f      	movs	r2, #15
 8000964:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	sen->TEST_CONFIG.data = 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sen->DEVICE_CONFIG.adr = DEVICE_CONFIG;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	741a      	strb	r2, [r3, #16]
	sen->DEVICE_CONFIG.data = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	825a      	strh	r2, [r3, #18]
	sen->SENSOR_CONFIG.adr = SENSOR_CONFIG;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	751a      	strb	r2, [r3, #20]
	sen->SENSOR_CONFIG.data = 0;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	82da      	strh	r2, [r3, #22]
	sen->SYSTEM_CONFIG.adr = SYSTEM_CONFIG;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2202      	movs	r2, #2
 800098c:	761a      	strb	r2, [r3, #24]
	sen->SYSTEM_CONFIG.data = 0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	835a      	strh	r2, [r3, #26]
	sen->CONV_STATUS.adr = CONV_STATUS;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2208      	movs	r2, #8
 8000998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	sen->CONV_STATUS.data = 0;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	865a      	strh	r2, [r3, #50]	; 0x32
	sen->X_CH_RESULT.adr = X_CH_RESULT;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2209      	movs	r2, #9
 80009a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	sen->X_CH_RESULT.data = 0;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	86da      	strh	r2, [r3, #54]	; 0x36
	sen->Y_CH_RESULT.adr = Y_CH_RESULT;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	220a      	movs	r2, #10
 80009b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sen->Y_CH_RESULT.data = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	875a      	strh	r2, [r3, #58]	; 0x3a
	sen->Z_CH_RESULT.adr = Z_CH_RESULT;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	220b      	movs	r2, #11
 80009c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	sen->Z_CH_RESULT.data = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	87da      	strh	r2, [r3, #62]	; 0x3e

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <read_register>:

uint16_t read_register(Sensor* sen,REGISTER_ADR reg)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	70fb      	strb	r3, [r7, #3]
	uint16_t* pRegData=NULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
	uint8_t regAdr = -1;
 80009e6:	23ff      	movs	r3, #255	; 0xff
 80009e8:	72fb      	strb	r3, [r7, #11]

	if(reg==DEVICE_CONFIG)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d106      	bne.n	80009fe <read_register+0x28>
	{
		pRegData = &(sen->DEVICE_CONFIG.data);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3312      	adds	r3, #18
 80009f4:	60fb      	str	r3, [r7, #12]
		regAdr = sen->DEVICE_CONFIG.adr;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7c1b      	ldrb	r3, [r3, #16]
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	e053      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==SENSOR_CONFIG)
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <read_register+0x3c>
	{
		pRegData = &(sen->SENSOR_CONFIG.data);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3316      	adds	r3, #22
 8000a08:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SENSOR_CONFIG.adr;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7d1b      	ldrb	r3, [r3, #20]
 8000a0e:	72fb      	strb	r3, [r7, #11]
 8000a10:	e049      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==SYSTEM_CONFIG)
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d106      	bne.n	8000a26 <read_register+0x50>
	{
		pRegData = &(sen->SYSTEM_CONFIG.data);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	331a      	adds	r3, #26
 8000a1c:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SYSTEM_CONFIG.adr;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7e1b      	ldrb	r3, [r3, #24]
 8000a22:	72fb      	strb	r3, [r7, #11]
 8000a24:	e03f      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==TEST_CONFIG)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d107      	bne.n	8000a3c <read_register+0x66>
	{
		pRegData = &(sen->TEST_CONFIG.data);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	334e      	adds	r3, #78	; 0x4e
 8000a30:	60fb      	str	r3, [r7, #12]
		regAdr = sen->TEST_CONFIG.adr;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000a38:	72fb      	strb	r3, [r7, #11]
 8000a3a:	e034      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==CONV_STATUS)
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d107      	bne.n	8000a52 <read_register+0x7c>
	{
		pRegData = &(sen->CONV_STATUS.data);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3332      	adds	r3, #50	; 0x32
 8000a46:	60fb      	str	r3, [r7, #12]
		regAdr = sen->CONV_STATUS.adr;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a4e:	72fb      	strb	r3, [r7, #11]
 8000a50:	e029      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==X_CH_RESULT)
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	d107      	bne.n	8000a68 <read_register+0x92>
	{
		pRegData = &(sen->X_CH_RESULT.data);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3336      	adds	r3, #54	; 0x36
 8000a5c:	60fb      	str	r3, [r7, #12]
		regAdr = sen->X_CH_RESULT.adr;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a64:	72fb      	strb	r3, [r7, #11]
 8000a66:	e01e      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==Y_CH_RESULT)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b0a      	cmp	r3, #10
 8000a6c:	d107      	bne.n	8000a7e <read_register+0xa8>
	{
		pRegData = &(sen->Y_CH_RESULT.data);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	333a      	adds	r3, #58	; 0x3a
 8000a72:	60fb      	str	r3, [r7, #12]
		regAdr = sen->Y_CH_RESULT.adr;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a7a:	72fb      	strb	r3, [r7, #11]
 8000a7c:	e013      	b.n	8000aa6 <read_register+0xd0>
	}
	else if(reg==Z_CH_RESULT)
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b0b      	cmp	r3, #11
 8000a82:	d107      	bne.n	8000a94 <read_register+0xbe>
	{
		pRegData = &(sen->Z_CH_RESULT.data);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	333e      	adds	r3, #62	; 0x3e
 8000a88:	60fb      	str	r3, [r7, #12]
		regAdr = sen->Z_CH_RESULT.adr;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a90:	72fb      	strb	r3, [r7, #11]
 8000a92:	e008      	b.n	8000aa6 <read_register+0xd0>
	}

	else if((pRegData==NULL)||(regAdr==-1))
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <read_register+0xca>
	{
		return -1;
 8000a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9e:	e014      	b.n	8000aca <read_register+0xf4>
	}
	else
	{
		return -1;
 8000aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa4:	e011      	b.n	8000aca <read_register+0xf4>
	}

	select_sensor(sen->adr);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f8ae 	bl	8000c0c <select_sensor>
	*pRegData = spi_read_reg(regAdr, pRegData);
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	68f9      	ldr	r1, [r7, #12]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f9ff 	bl	8000eb8 <spi_read_reg>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	801a      	strh	r2, [r3, #0]
	deselect_sensor();
 8000ac2:	f000 f8c5 	bl	8000c50 <deselect_sensor>
	return *pRegData;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	881b      	ldrh	r3, [r3, #0]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <registersAreSet>:

uint32_t registersAreSet(uint16_t* testReg)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	if((*testReg==TEST_REG_EXPECTED_VAL) && (*(testReg+1) == DEVICE_CONFIG_EXPECTED_VAL) && (*(testReg+2) == SENSOR_CONFIG_EXPECTED_VAL) && (*(testReg+3) == SYSTEM_CONFIG_EXPECTED_VAL))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	2b54      	cmp	r3, #84	; 0x54
 8000ae0:	d114      	bne.n	8000b0c <registersAreSet+0x3a>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	f245 0220 	movw	r2, #20512	; 0x5020
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10d      	bne.n	8000b0c <registersAreSet+0x3a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3304      	adds	r3, #4
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <registersAreSet+0x3a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3306      	adds	r3, #6
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <registersAreSet+0x3a>
	{
		return 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <registersAreSet+0x3c>
	}
	else return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <device_config>:
	}
	deselect_sensor();
}

void device_config(Sensor* sen)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	//Current value: 0x5020 → 0b0101 0000 0010 0000
	uint16_t* pRegData= &(sen->DEVICE_CONFIG.data);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3312      	adds	r3, #18
 8000b24:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, CONV_AVG, 0x05); // Best SNR
 8000b26:	2205      	movs	r2, #5
 8000b28:	210c      	movs	r1, #12
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff fdff 	bl	800072e <writeToRegister>
	writeToRegister(pRegData, OPERATING_MODE, 0x2); //Continuous conversion
 8000b30:	2202      	movs	r2, #2
 8000b32:	2104      	movs	r1, #4
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fdfa 	bl	800072e <writeToRegister>

	select_sensor(sen->adr);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f864 	bl	8000c0c <select_sensor>
	spi_write_reg(sen->DEVICE_CONFIG.adr, pRegData);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7c1b      	ldrb	r3, [r3, #16]
 8000b48:	68f9      	ldr	r1, [r7, #12]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f9e8 	bl	8000f20 <spi_write_reg>
	deselect_sensor();
 8000b50:	f000 f87e 	bl	8000c50 <deselect_sensor>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <sensor_config>:


void sensor_config(Sensor* sen)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	//Current value: 0x01D5 → 0b0000 0001 1101 0101
	uint16_t* pRegData= &(sen->SENSOR_CONFIG.data);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3316      	adds	r3, #22
 8000b68:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData,ANGLE_EN ,0x00);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	210e      	movs	r1, #14
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fddd 	bl	800072e <writeToRegister>
	writeToRegister(pRegData,SLEEPTIME,0x00);//1ms sleeptime between conversions
 8000b74:	2200      	movs	r2, #0
 8000b76:	210a      	movs	r1, #10
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff fdd8 	bl	800072e <writeToRegister>
	writeToRegister(pRegData,MAG_CH_EN,0x7);//X,Y,Z channel enabled
 8000b7e:	2207      	movs	r2, #7
 8000b80:	2106      	movs	r1, #6
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fdd3 	bl	800072e <writeToRegister>
	writeToRegister(pRegData,Z_RANGE,0x1);//+-75mT field range
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fdce 	bl	800072e <writeToRegister>
	writeToRegister(pRegData,Y_RANGE,0x1);//+-75mT field range
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff fdc9 	bl	800072e <writeToRegister>
	writeToRegister(pRegData,X_RANGE,0x1);//+-75mT field range
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff fdc4 	bl	800072e <writeToRegister>

	select_sensor(sen->adr);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f82e 	bl	8000c0c <select_sensor>
	spi_write_reg(sen->SENSOR_CONFIG.adr, pRegData);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7d1b      	ldrb	r3, [r3, #20]
 8000bb4:	68f9      	ldr	r1, [r7, #12]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f9b2 	bl	8000f20 <spi_write_reg>
	deselect_sensor();
 8000bbc:	f000 f848 	bl	8000c50 <deselect_sensor>
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <system_config>:

void system_config(Sensor* sen)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	//Current value: 0x00
	uint16_t* pRegData= &(sen->SYSTEM_CONFIG.data);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	331a      	adds	r3, #26
 8000bd4:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, TRIGGER_MODE, 0x00); //Conversion on CS pulse
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2109      	movs	r1, #9
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fda7 	bl	800072e <writeToRegister>
	writeToRegister(pRegData, DATA_TYPE, 0x00);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2106      	movs	r1, #6
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fda2 	bl	800072e <writeToRegister>

	select_sensor(sen->adr);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f80c 	bl	8000c0c <select_sensor>
	spi_write_reg(sen->SYSTEM_CONFIG.adr, pRegData);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7e1b      	ldrb	r3, [r3, #24]
 8000bf8:	68f9      	ldr	r1, [r7, #12]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f990 	bl	8000f20 <spi_write_reg>
	deselect_sensor();
 8000c00:	f000 f826 	bl	8000c50 <deselect_sensor>
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <select_sensor>:

void select_sensor(uint8_t adr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint16_t message = ~(1 << (8-adr + 7));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f1c3 030f 	rsb	r3, r3, #15
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	81fb      	strh	r3, [r7, #14]
    set_sh_reg_OE(1);
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 f828 	bl	8000c80 <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&message, 2, 10);
 8000c30:	f107 010e 	add.w	r1, r7, #14
 8000c34:	230a      	movs	r3, #10
 8000c36:	2202      	movs	r2, #2
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <select_sensor+0x40>)
 8000c3a:	f001 ff57 	bl	8002aec <HAL_SPI_Transmit>
    set_sh_reg_OE(0);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f81e 	bl	8000c80 <set_sh_reg_OE>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000124 	.word	0x20000124

08000c50 <deselect_sensor>:

void deselect_sensor()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	uint16_t message = 0xFFFF;
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	80fb      	strh	r3, [r7, #6]
    set_sh_reg_OE(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 f80f 	bl	8000c80 <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&message, 2, 10);
 8000c62:	1db9      	adds	r1, r7, #6
 8000c64:	230a      	movs	r3, #10
 8000c66:	2202      	movs	r2, #2
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <deselect_sensor+0x2c>)
 8000c6a:	f001 ff3f 	bl	8002aec <HAL_SPI_Transmit>
    set_sh_reg_OE(0);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f806 	bl	8000c80 <set_sh_reg_OE>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000124 	.word	0x20000124

08000c80 <set_sh_reg_OE>:

void set_sh_reg_OE(uint32_t value)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, value);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <set_sh_reg_OE+0x20>)
 8000c92:	f001 f91f 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <measuringLED>:



void measuringLED()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_MEASURING_GPIO_Port, LED_MEASURING_Pin);
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <measuringLED+0x10>)
 8000cac:	f001 f92a 	bl	8001f04 <HAL_GPIO_TogglePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <errorLED>:

void errorLED()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <errorLED+0x18>)
 8000cc2:	f001 f91f 	bl	8001f04 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8000cc6:	2032      	movs	r0, #50	; 0x32
 8000cc8:	f000 fb8c 	bl	80013e4 <HAL_Delay>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <MX_SPI1_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d26:	f001 fe5d 	bl	80029e4 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d30:	f7ff fcf8 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000cc 	.word	0x200000cc
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <MX_SPI2_Init+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d74:	2230      	movs	r2, #48	; 0x30
 8000d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_SPI2_Init+0x64>)
 8000d92:	f001 fe27 	bl	80029e4 <HAL_SPI_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d9c:	f7ff fcc2 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000124 	.word	0x20000124
 8000da8:	40003800 	.word	0x40003800

08000dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <HAL_SPI_MspInit+0xf8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d130      	bne.n	8000e2e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4827      	ldr	r0, [pc, #156]	; (8000eac <HAL_SPI_MspInit+0x100>)
 8000e10:	f000 fecc 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <HAL_SPI_MspInit+0x100>)
 8000e28:	f000 fec0 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e2c:	e036      	b.n	8000e9c <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <HAL_SPI_MspInit+0x104>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d131      	bne.n	8000e9c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	61d3      	str	r3, [r2, #28]
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_SPI_MspInit+0xfc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCK_SHREG_Pin|MOSI_SHREG_Pin;
 8000e68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_SPI_MspInit+0x108>)
 8000e7e:	f000 fe95 	bl	8001bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_SHREG_Pin;
 8000e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MISO_SHREG_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <HAL_SPI_MspInit+0x108>)
 8000e98:	f000 fe88 	bl	8001bac <HAL_GPIO_Init>
}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <spi_read_reg>:
#include "main.h"

#define SPI_MESSAGE_LENGTH 4

uint16_t spi_read_reg(uint8_t regAdr, uint16_t *stat)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[4]={0x00};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
	uint8_t rxData[4]={0x00};
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
	uint16_t msg;
	regAdr |= 0x80; //MSB 1 for reading
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed2:	71fb      	strb	r3, [r7, #7]
	txData[0] = regAdr;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	743b      	strb	r3, [r7, #16]
	HAL_SPI_TransmitReceive(&hspi1,txData,rxData,4,10);
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	f107 0110 	add.w	r1, r7, #16
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <spi_read_reg+0x64>)
 8000ee8:	f001 ff43 	bl	8002d72 <HAL_SPI_TransmitReceive>
	*stat = (rxData[0]<<8) + rxData[3];
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	801a      	strh	r2, [r3, #0]
	msg = ((rxData[1]<<8) + rxData[2]);
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	82fb      	strh	r3, [r7, #22]
	return msg;
 8000f10:	8afb      	ldrh	r3, [r7, #22]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000cc 	.word	0x200000cc

08000f20 <spi_write_reg>:

void spi_write_reg(REGISTER_ADR regAdr,uint16_t* pRegData)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t message[4];
	regAdr |= 0x00;              //First MSB bitm must be
	message[0] = regAdr;         //Write an address with first bit set to 0
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	733b      	strb	r3, [r7, #12]
	message[1] = *pRegData>>8;    //Write data to register 8MSB bits
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	737b      	strb	r3, [r7, #13]
	message[2] = *pRegData;       //Write data to register 8LSB bits
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73bb      	strb	r3, [r7, #14]
	message[3] = calc_crc(regAdr, pRegData); //TODO: CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        //Write cmd to start conversion on next CS going high
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fcb1 	bl	80008b0 <calc_crc>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, message, SPI_MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <spi_write_reg+0x4c>)
 8000f5e:	f001 fdc5 	bl	8002aec <HAL_SPI_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000cc 	.word	0x200000cc

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 f9c7 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <DMA2_Channel4_5_IRQHandler+0x10>)
 800102a:	f000 fb83 	bl	8001734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000210 	.word	0x20000210

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f002 fc10 	bl	800388c <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20010000 	.word	0x20010000
 8001098:	00000400 	.word	0x00000400
 800109c:	2000017c 	.word	0x2000017c
 80010a0:	200003a0 	.word	0x200003a0

080010a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_UART4_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_UART4_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_UART4_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_UART4_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_UART4_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_UART4_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_UART4_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_UART4_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_UART4_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_UART4_Init+0x4c>)
 80010e8:	f002 f89a 	bl	8003220 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010f2:	f7ff fb17 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000180 	.word	0x20000180
 8001100:	40004c00 	.word	0x40004c00

08001104 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_UART5_Init+0x4c>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_UART5_Init+0x50>)
 800110c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_UART5_Init+0x4c>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_UART5_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_UART5_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_UART5_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_UART5_Init+0x4c>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_UART5_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_UART5_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_UART5_Init+0x4c>)
 800113c:	f002 f870 	bl	8003220 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001146:	f7ff faed 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001c8 	.word	0x200001c8
 8001154:	40005000 	.word	0x40005000

08001158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <HAL_UART_MspInit+0x160>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d158      	bne.n	800122a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_UART_MspInit+0x164>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_UART_MspInit+0x164>)
 800117e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_UART_MspInit+0x164>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4619      	mov	r1, r3
 80011bc:	4840      	ldr	r0, [pc, #256]	; (80012c0 <HAL_UART_MspInit+0x168>)
 80011be:	f000 fcf5 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	483a      	ldr	r0, [pc, #232]	; (80012c0 <HAL_UART_MspInit+0x168>)
 80011d8:	f000 fce8 	bl	8001bac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011de:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_UART_MspInit+0x170>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011e4:	2210      	movs	r2, #16
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800120c:	482d      	ldr	r0, [pc, #180]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 800120e:	f000 fa1b 	bl	8001648 <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001218:	f7ff fa84 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_UART_MspInit+0x16c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001228:	e041      	b.n	80012ae <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==UART5)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_UART_MspInit+0x174>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d13c      	bne.n	80012ae <HAL_UART_MspInit+0x156>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_UART_MspInit+0x164>)
 800123a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800123e:	61d3      	str	r3, [r2, #28]
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_MspInit+0x164>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0x164>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_UART_MspInit+0x164>)
 800126a:	f043 0320 	orr.w	r3, r3, #32
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_UART_MspInit+0x164>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <HAL_UART_MspInit+0x168>)
 8001292:	f000 fc8b 	bl	8001bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001296:	2304      	movs	r3, #4
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <HAL_UART_MspInit+0x178>)
 80012aa:	f000 fc7f 	bl	8001bac <HAL_GPIO_Init>
}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004c00 	.word	0x40004c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40011000 	.word	0x40011000
 80012c4:	20000210 	.word	0x20000210
 80012c8:	40020458 	.word	0x40020458
 80012cc:	40005000 	.word	0x40005000
 80012d0:	40011400 	.word	0x40011400

080012d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d4:	f7ff fee6 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f0:	4c09      	ldr	r4, [pc, #36]	; (8001318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f002 facb 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001302:	f7ff f8b1 	bl	8000468 <main>
  bx lr
 8001306:	4770      	bx	lr
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001310:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8001314:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001318:	200003a0 	.word	0x200003a0

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f947 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	200f      	movs	r0, #15
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fe18 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f95f 	bl	800162e <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f927 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_IncTick+0x1c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x20>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x20>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000254 	.word	0x20000254

080013d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <HAL_GetTick+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000254 	.word	0x20000254

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffe0 	bl	80013d0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4906      	ldr	r1, [pc, #24]	; (80014c4 <__NVIC_EnableIRQ+0x34>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff90 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff2d 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff42 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff90 	bl	800151c <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5f 	bl	80014c8 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff35 	bl	8001490 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e059      	b.n	8001712 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_DMA_Init+0xd4>)
 8001666:	429a      	cmp	r2, r3
 8001668:	d80f      	bhi.n	800168a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_DMA_Init+0xd8>)
 8001672:	4413      	add	r3, r2
 8001674:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <HAL_DMA_Init+0xdc>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	009a      	lsls	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_DMA_Init+0xe0>)
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
 8001688:	e00e      	b.n	80016a8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_DMA_Init+0xe4>)
 8001692:	4413      	add	r3, r2
 8001694:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_DMA_Init+0xdc>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a22      	ldr	r2, [pc, #136]	; (8001730 <HAL_DMA_Init+0xe8>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40020407 	.word	0x40020407
 8001720:	bffdfff8 	.word	0xbffdfff8
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	40020000 	.word	0x40020000
 800172c:	bffdfbf8 	.word	0xbffdfbf8
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	2204      	movs	r2, #4
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80f1 	beq.w	8001940 <HAL_DMA_IRQHandler+0x20c>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80eb 	beq.w	8001940 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_DMA_IRQHandler+0x1d8>)
 8001790:	429a      	cmp	r2, r3
 8001792:	d958      	bls.n	8001846 <HAL_DMA_IRQHandler+0x112>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <HAL_DMA_IRQHandler+0x1dc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d04f      	beq.n	800183e <HAL_DMA_IRQHandler+0x10a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5c      	ldr	r2, [pc, #368]	; (8001914 <HAL_DMA_IRQHandler+0x1e0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d048      	beq.n	800183a <HAL_DMA_IRQHandler+0x106>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_DMA_IRQHandler+0x1e4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d040      	beq.n	8001834 <HAL_DMA_IRQHandler+0x100>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a59      	ldr	r2, [pc, #356]	; (800191c <HAL_DMA_IRQHandler+0x1e8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d038      	beq.n	800182e <HAL_DMA_IRQHandler+0xfa>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_DMA_IRQHandler+0x1ec>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d030      	beq.n	8001828 <HAL_DMA_IRQHandler+0xf4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_DMA_IRQHandler+0x1f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d028      	beq.n	8001822 <HAL_DMA_IRQHandler+0xee>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_DMA_IRQHandler+0x1d8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d020      	beq.n	800181c <HAL_DMA_IRQHandler+0xe8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_DMA_IRQHandler+0x1f4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d019      	beq.n	8001818 <HAL_DMA_IRQHandler+0xe4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_DMA_IRQHandler+0x1f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d012      	beq.n	8001814 <HAL_DMA_IRQHandler+0xe0>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_DMA_IRQHandler+0x1fc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00a      	beq.n	800180e <HAL_DMA_IRQHandler+0xda>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_DMA_IRQHandler+0x200>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d102      	bne.n	8001808 <HAL_DMA_IRQHandler+0xd4>
 8001802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001806:	e01b      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800180c:	e018      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 800180e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001812:	e015      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	e013      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001818:	2304      	movs	r3, #4
 800181a:	e011      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 800181c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001820:	e00e      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001826:	e00b      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800182c:	e008      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 800182e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001832:	e005      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 8001834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001838:	e002      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 800183a:	2340      	movs	r3, #64	; 0x40
 800183c:	e000      	b.n	8001840 <HAL_DMA_IRQHandler+0x10c>
 800183e:	2304      	movs	r3, #4
 8001840:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_DMA_IRQHandler+0x204>)
 8001842:	6053      	str	r3, [r2, #4]
 8001844:	e057      	b.n	80018f6 <HAL_DMA_IRQHandler+0x1c2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_DMA_IRQHandler+0x1dc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04f      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x1bc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_DMA_IRQHandler+0x1e0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d048      	beq.n	80018ec <HAL_DMA_IRQHandler+0x1b8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2e      	ldr	r2, [pc, #184]	; (8001918 <HAL_DMA_IRQHandler+0x1e4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d040      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x1b2>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2c      	ldr	r2, [pc, #176]	; (800191c <HAL_DMA_IRQHandler+0x1e8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d038      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x1ac>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <HAL_DMA_IRQHandler+0x1ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d030      	beq.n	80018da <HAL_DMA_IRQHandler+0x1a6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <HAL_DMA_IRQHandler+0x1f0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d028      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x1a0>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_DMA_IRQHandler+0x1d8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d020      	beq.n	80018ce <HAL_DMA_IRQHandler+0x19a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_DMA_IRQHandler+0x1f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_DMA_IRQHandler+0x196>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a24      	ldr	r2, [pc, #144]	; (800192c <HAL_DMA_IRQHandler+0x1f8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d012      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x192>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_DMA_IRQHandler+0x1fc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x18c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a21      	ldr	r2, [pc, #132]	; (8001934 <HAL_DMA_IRQHandler+0x200>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <HAL_DMA_IRQHandler+0x186>
 80018b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b8:	e01b      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018be:	e018      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c4:	e015      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	e013      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e011      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018d2:	e00e      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d8:	e00b      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018de:	e008      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e4:	e005      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	e002      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	e000      	b.n	80018f2 <HAL_DMA_IRQHandler+0x1be>
 80018f0:	2304      	movs	r3, #4
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_DMA_IRQHandler+0x208>)
 80018f4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8136 	beq.w	8001b6c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001908:	e130      	b.n	8001b6c <HAL_DMA_IRQHandler+0x438>
 800190a:	bf00      	nop
 800190c:	40020080 	.word	0x40020080
 8001910:	40020008 	.word	0x40020008
 8001914:	4002001c 	.word	0x4002001c
 8001918:	40020030 	.word	0x40020030
 800191c:	40020044 	.word	0x40020044
 8001920:	40020058 	.word	0x40020058
 8001924:	4002006c 	.word	0x4002006c
 8001928:	40020408 	.word	0x40020408
 800192c:	4002041c 	.word	0x4002041c
 8001930:	40020430 	.word	0x40020430
 8001934:	40020444 	.word	0x40020444
 8001938:	40020400 	.word	0x40020400
 800193c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	2202      	movs	r2, #2
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80dd 	beq.w	8001b0c <HAL_DMA_IRQHandler+0x3d8>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80d7 	beq.w	8001b0c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 020a 	bic.w	r2, r2, #10
 800197a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_DMA_IRQHandler+0x444>)
 800198c:	429a      	cmp	r2, r3
 800198e:	d958      	bls.n	8001a42 <HAL_DMA_IRQHandler+0x30e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a79      	ldr	r2, [pc, #484]	; (8001b7c <HAL_DMA_IRQHandler+0x448>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d04f      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x306>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a78      	ldr	r2, [pc, #480]	; (8001b80 <HAL_DMA_IRQHandler+0x44c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d048      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x302>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a76      	ldr	r2, [pc, #472]	; (8001b84 <HAL_DMA_IRQHandler+0x450>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d040      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x2fc>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_DMA_IRQHandler+0x454>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d038      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x2f6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a73      	ldr	r2, [pc, #460]	; (8001b8c <HAL_DMA_IRQHandler+0x458>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d030      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x2f0>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_DMA_IRQHandler+0x45c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d028      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x2ea>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_DMA_IRQHandler+0x444>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d020      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2e4>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_DMA_IRQHandler+0x460>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d019      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2e0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6c      	ldr	r2, [pc, #432]	; (8001b98 <HAL_DMA_IRQHandler+0x464>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d012      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2dc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6b      	ldr	r2, [pc, #428]	; (8001b9c <HAL_DMA_IRQHandler+0x468>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00a      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x2d6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a69      	ldr	r2, [pc, #420]	; (8001ba0 <HAL_DMA_IRQHandler+0x46c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d102      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x2d0>
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	e01b      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a08:	e018      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0e:	e015      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a10:	2320      	movs	r3, #32
 8001a12:	e013      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e011      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1c:	e00e      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a22:	e00b      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a28:	e008      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	e005      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a34:	e002      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a36:	2320      	movs	r3, #32
 8001a38:	e000      	b.n	8001a3c <HAL_DMA_IRQHandler+0x308>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	4a59      	ldr	r2, [pc, #356]	; (8001ba4 <HAL_DMA_IRQHandler+0x470>)
 8001a3e:	6053      	str	r3, [r2, #4]
 8001a40:	e057      	b.n	8001af2 <HAL_DMA_IRQHandler+0x3be>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_DMA_IRQHandler+0x448>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d04f      	beq.n	8001aec <HAL_DMA_IRQHandler+0x3b8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <HAL_DMA_IRQHandler+0x44c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d048      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x3b4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_DMA_IRQHandler+0x450>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d040      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x3ae>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_DMA_IRQHandler+0x454>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d038      	beq.n	8001adc <HAL_DMA_IRQHandler+0x3a8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_DMA_IRQHandler+0x458>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d030      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x3a2>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <HAL_DMA_IRQHandler+0x45c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d028      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x39c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a3d      	ldr	r2, [pc, #244]	; (8001b78 <HAL_DMA_IRQHandler+0x444>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d020      	beq.n	8001aca <HAL_DMA_IRQHandler+0x396>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <HAL_DMA_IRQHandler+0x460>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x392>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HAL_DMA_IRQHandler+0x464>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x38e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <HAL_DMA_IRQHandler+0x468>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x388>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_DMA_IRQHandler+0x46c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x382>
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	e01b      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aba:	e018      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac0:	e015      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e013      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e011      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ace:	e00e      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ad4:	e00b      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ada:	e008      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	e005      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae6:	e002      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001ae8:	2320      	movs	r3, #32
 8001aea:	e000      	b.n	8001aee <HAL_DMA_IRQHandler+0x3ba>
 8001aec:	2302      	movs	r3, #2
 8001aee:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <HAL_DMA_IRQHandler+0x474>)
 8001af0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d034      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b0a:	e02f      	b.n	8001b6c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	2208      	movs	r2, #8
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d028      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x43a>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d023      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020e 	bic.w	r2, r2, #14
 8001b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
    }
  }
  return;
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
}
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020080 	.word	0x40020080
 8001b7c:	40020008 	.word	0x40020008
 8001b80:	4002001c 	.word	0x4002001c
 8001b84:	40020030 	.word	0x40020030
 8001b88:	40020044 	.word	0x40020044
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	40020408 	.word	0x40020408
 8001b98:	4002041c 	.word	0x4002041c
 8001b9c:	40020430 	.word	0x40020430
 8001ba0:	40020444 	.word	0x40020444
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e179      	b.n	8001eb4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8168 	bne.w	8001eae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a96      	ldr	r2, [pc, #600]	; (8001e3c <HAL_GPIO_Init+0x290>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d05e      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001be8:	4a94      	ldr	r2, [pc, #592]	; (8001e3c <HAL_GPIO_Init+0x290>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d875      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bee:	4a94      	ldr	r2, [pc, #592]	; (8001e40 <HAL_GPIO_Init+0x294>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d058      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_GPIO_Init+0x294>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d86f      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001bfa:	4a92      	ldr	r2, [pc, #584]	; (8001e44 <HAL_GPIO_Init+0x298>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d052      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c00:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_GPIO_Init+0x298>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d869      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c06:	4a90      	ldr	r2, [pc, #576]	; (8001e48 <HAL_GPIO_Init+0x29c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a8e      	ldr	r2, [pc, #568]	; (8001e48 <HAL_GPIO_Init+0x29c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d863      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c12:	4a8e      	ldr	r2, [pc, #568]	; (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d046      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a8c      	ldr	r2, [pc, #560]	; (8001e4c <HAL_GPIO_Init+0x2a0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d85d      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d82a      	bhi.n	8001c78 <HAL_GPIO_Init+0xcc>
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d859      	bhi.n	8001cda <HAL_GPIO_Init+0x12e>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_GPIO_Init+0x80>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c93 	.word	0x08001c93
 8001c38:	08001cd5 	.word	0x08001cd5
 8001c3c:	08001cdb 	.word	0x08001cdb
 8001c40:	08001cdb 	.word	0x08001cdb
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001cdb 	.word	0x08001cdb
 8001c4c:	08001cdb 	.word	0x08001cdb
 8001c50:	08001cdb 	.word	0x08001cdb
 8001c54:	08001cdb 	.word	0x08001cdb
 8001c58:	08001cdb 	.word	0x08001cdb
 8001c5c:	08001cdb 	.word	0x08001cdb
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cdb 	.word	0x08001cdb
 8001c68:	08001cdb 	.word	0x08001cdb
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c9d 	.word	0x08001c9d
 8001c78:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_GPIO_Init+0x2a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7e:	e02c      	b.n	8001cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e029      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e024      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	3308      	adds	r3, #8
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e01f      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e01a      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	623b      	str	r3, [r7, #32]
          break;
 8001cb2:	e013      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	611a      	str	r2, [r3, #16]
          break;
 8001cc6:	e009      	b.n	8001cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	615a      	str	r2, [r3, #20]
          break;
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x130>
          break;
 8001cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d801      	bhi.n	8001ce6 <HAL_GPIO_Init+0x13a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_Init+0x13e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_GPIO_Init+0x14c>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x152>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3b08      	subs	r3, #8
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	210f      	movs	r1, #15
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6a39      	ldr	r1, [r7, #32]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80c1 	beq.w	8001eae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2c:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_GPIO_Init+0x2a8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d44:	4a44      	ldr	r2, [pc, #272]	; (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HAL_GPIO_Init+0x2b0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d01f      	beq.n	8001db0 <HAL_GPIO_Init+0x204>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3b      	ldr	r2, [pc, #236]	; (8001e60 <HAL_GPIO_Init+0x2b4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d019      	beq.n	8001dac <HAL_GPIO_Init+0x200>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x2b8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_GPIO_Init+0x1fc>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a39      	ldr	r2, [pc, #228]	; (8001e68 <HAL_GPIO_Init+0x2bc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00d      	beq.n	8001da4 <HAL_GPIO_Init+0x1f8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d007      	beq.n	8001da0 <HAL_GPIO_Init+0x1f4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a37      	ldr	r2, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_GPIO_Init+0x1f0>
 8001d98:	2305      	movs	r3, #5
 8001d9a:	e00a      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001d9c:	2306      	movs	r3, #6
 8001d9e:	e008      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e006      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e004      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_GPIO_Init+0x206>
 8001db0:	2300      	movs	r3, #0
 8001db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db4:	f002 0203 	and.w	r2, r2, #3
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc2:	4925      	ldr	r1, [pc, #148]	; (8001e58 <HAL_GPIO_Init+0x2ac>)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4924      	ldr	r1, [pc, #144]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4920      	ldr	r1, [pc, #128]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	491a      	ldr	r1, [pc, #104]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d025      	beq.n	8001e78 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4910      	ldr	r1, [pc, #64]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	e025      	b.n	8001e86 <HAL_GPIO_Init+0x2da>
 8001e3a:	bf00      	nop
 8001e3c:	10320000 	.word	0x10320000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10220000 	.word	0x10220000
 8001e48:	10210000 	.word	0x10210000
 8001e4c:	10120000 	.word	0x10120000
 8001e50:	10110000 	.word	0x10110000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	40011800 	.word	0x40011800
 8001e70:	40011c00 	.word	0x40011c00
 8001e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <HAL_GPIO_Init+0x324>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f ae7e 	bne.w	8001bc0 <HAL_GPIO_Init+0x14>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	372c      	adds	r7, #44	; 0x2c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43d9      	mvns	r1, r3
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	400b      	ands	r3, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	611a      	str	r2, [r3, #16]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12b      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fa44 	bl	80003ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f000 fcdc 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8001fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a81      	ldr	r2, [pc, #516]	; (80021ac <HAL_I2C_Init+0x274>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d807      	bhi.n	8001fbc <HAL_I2C_Init+0x84>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a80      	ldr	r2, [pc, #512]	; (80021b0 <HAL_I2C_Init+0x278>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e006      	b.n	8001fca <HAL_I2C_Init+0x92>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a7d      	ldr	r2, [pc, #500]	; (80021b4 <HAL_I2C_Init+0x27c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	bf94      	ite	ls
 8001fc4:	2301      	movls	r3, #1
 8001fc6:	2300      	movhi	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0e7      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a78      	ldr	r2, [pc, #480]	; (80021b8 <HAL_I2C_Init+0x280>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_I2C_Init+0x274>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d802      	bhi.n	800200c <HAL_I2C_Init+0xd4>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	e009      	b.n	8002020 <HAL_I2C_Init+0xe8>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_I2C_Init+0x284>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	3301      	adds	r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	495c      	ldr	r1, [pc, #368]	; (80021ac <HAL_I2C_Init+0x274>)
 800203c:	428b      	cmp	r3, r1
 800203e:	d819      	bhi.n	8002074 <HAL_I2C_Init+0x13c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e59      	subs	r1, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fbb1 f3f3 	udiv	r3, r1, r3
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002054:	400b      	ands	r3, r1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_I2C_Init+0x138>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e59      	subs	r1, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fbb1 f3f3 	udiv	r3, r1, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206e:	e051      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002070:	2304      	movs	r3, #4
 8002072:	e04f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_I2C_Init+0x168>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e012      	b.n	80020c6 <HAL_I2C_Init+0x18e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	0099      	lsls	r1, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Init+0x196>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e022      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_I2C_Init+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1e58      	subs	r0, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	440b      	add	r3, r1
 80020e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	e00f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	6809      	ldr	r1, [r1, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6911      	ldr	r1, [r2, #16]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	000186a0 	.word	0x000186a0
 80021b0:	001e847f 	.word	0x001e847f
 80021b4:	003d08ff 	.word	0x003d08ff
 80021b8:	431bde83 	.word	0x431bde83
 80021bc:	10624dd3 	.word	0x10624dd3

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e272      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e0:	4b92      	ldr	r3, [pc, #584]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00c      	beq.n	8002206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ec:	4b8f      	ldr	r3, [pc, #572]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d112      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
 80021f8:	4b8c      	ldr	r3, [pc, #560]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d10b      	bne.n	800221e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002206:	4b89      	ldr	r3, [pc, #548]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06c      	beq.n	80022ec <HAL_RCC_OscConfig+0x12c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d168      	bne.n	80022ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e24c      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x76>
 8002228:	4b80      	ldr	r3, [pc, #512]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b7b      	ldr	r3, [pc, #492]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a77      	ldr	r2, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0xbc>
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a71      	ldr	r2, [pc, #452]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xd4>
 800227c:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a67      	ldr	r2, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff f898 	bl	80013d0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f894 	bl	80013d0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e200      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe4>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff f884 	bl	80013d0 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7ff f880 	bl	80013d0 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1ec      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x10c>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d063      	beq.n	80023c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fa:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1c0      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4939      	ldr	r1, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff f839 	bl	80013d0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002362:	f7ff f835 	bl	80013d0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1a1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4927      	ldr	r1, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f818 	bl	80013d0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7ff f814 	bl	80013d0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e180      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03a      	beq.n	8002444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe fff8 	bl	80013d0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fff4 	bl	80013d0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e160      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002402:	2001      	movs	r0, #1
 8002404:	f000 fad0 	bl	80029a8 <RCC_Delay>
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe ffde 	bl	80013d0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002416:	e00f      	b.n	8002438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe ffda 	bl	80013d0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d908      	bls.n	8002438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e146      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	42420000 	.word	0x42420000
 8002434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e9      	bne.n	8002418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80a6 	beq.w	800259e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a87      	ldr	r2, [pc, #540]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7e      	ldr	r2, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe ff9b 	bl	80013d0 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe ff97 	bl	80013d0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e103      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x4c8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x312>
 80024c4:	4b6f      	ldr	r3, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e02d      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x334>
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	e01c      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x356>
 80024fc:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a60      	ldr	r2, [pc, #384]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a5d      	ldr	r2, [pc, #372]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x36e>
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a57      	ldr	r2, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe ff4b 	bl	80013d0 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe ff47 	bl	80013d0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0b1      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCC_OscConfig+0x37e>
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe ff35 	bl	80013d0 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe ff31 	bl	80013d0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e09b      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8087 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d061      	beq.n	8002678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d146      	bne.n	800264a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe ff05 	bl	80013d0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe ff01 	bl	80013d0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e06d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4921      	ldr	r1, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a19      	ldr	r1, [r3, #32]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	430b      	orrs	r3, r1
 8002616:	491b      	ldr	r1, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fed5 	bl	80013d0 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fed1 	bl	80013d0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x46a>
 8002648:	e035      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_OscConfig+0x4cc>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe febe 	bl	80013d0 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe feba 	bl	80013d0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e026      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x498>
 8002676:	e01e      	b.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e019      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x500>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0d0      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4965      	ldr	r1, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d040      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e073      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06b      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4936      	ldr	r1, [pc, #216]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fe0c 	bl	80013d0 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fe fe08 	bl	80013d0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e053      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d210      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1cc>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fd6a 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
 800288c:	080039a8 	.word	0x080039a8
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x36>
 80028c6:	e027      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	e027      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0c5b      	lsrs	r3, r3, #17
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	fb03 f202 	mul.w	r2, r3, r2
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e004      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	613b      	str	r3, [r7, #16]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_GetSysClockFreq+0xa8>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	693b      	ldr	r3, [r7, #16]
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	00f42400 	.word	0x00f42400
 8002934:	080039c0 	.word	0x080039c0
 8002938:	080039d0 	.word	0x080039d0
 800293c:	003d0900 	.word	0x003d0900
 8002940:	007a1200 	.word	0x007a1200

08002944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <HAL_RCC_GetHCLKFreq+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800295c:	f7ff fff2 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	080039b8 	.word	0x080039b8

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002984:	f7ff ffde 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0adb      	lsrs	r3, r3, #11
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	080039b8 	.word	0x080039b8

080029a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <RCC_Delay+0x34>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <RCC_Delay+0x38>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c4:	bf00      	nop
  }
  while (Delay --);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <RCC_Delay+0x1c>
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000000 	.word	0x20000000
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e076      	b.n	8002ae4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d009      	beq.n	8002a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
 8002a0e:	e005      	b.n	8002a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f9b8 	bl	8000dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	0c1a      	lsrs	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f002 0204 	and.w	r2, r2, #4
 8002ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Transmit+0x22>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e12d      	b.n	8002d6a <HAL_SPI_Transmit+0x27e>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b16:	f7fe fc5b 	bl	80013d0 <HAL_GetTick>
 8002b1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b30:	e116      	b.n	8002d60 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_SPI_Transmit+0x52>
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b42:	e10d      	b.n	8002d60 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8a:	d10f      	bne.n	8002bac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002baa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d007      	beq.n	8002bca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd2:	d14f      	bne.n	8002c74 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_Transmit+0xf6>
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d142      	bne.n	8002c68 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c06:	e02f      	b.n	8002c68 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d112      	bne.n	8002c3c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	1c9a      	adds	r2, r3, #2
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c3a:	e015      	b.n	8002c68 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3c:	f7fe fbc8 	bl	80013d0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d803      	bhi.n	8002c54 <HAL_SPI_Transmit+0x168>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d102      	bne.n	8002c5a <HAL_SPI_Transmit+0x16e>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c66:	e07b      	b.n	8002d60 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ca      	bne.n	8002c08 <HAL_SPI_Transmit+0x11c>
 8002c72:	e050      	b.n	8002d16 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_Transmit+0x196>
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d144      	bne.n	8002d0c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ca8:	e030      	b.n	8002d0c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d113      	bne.n	8002ce0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cde:	e015      	b.n	8002d0c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce0:	f7fe fb76 	bl	80013d0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d803      	bhi.n	8002cf8 <HAL_SPI_Transmit+0x20c>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Transmit+0x212>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d0a:	e029      	b.n	8002d60 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1c9      	bne.n	8002caa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa62 	bl	80031e4 <SPI_EndRxTxTransaction>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e003      	b.n	8002d60 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08c      	sub	sp, #48	; 0x30
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x26>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e198      	b.n	80030ca <HAL_SPI_TransmitReceive+0x358>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da0:	f7fe fb16 	bl	80013d0 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00f      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x70>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc8:	d107      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x68>
 8002dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d003      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de0:	e16d      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x82>
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dfa:	e160      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d003      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	887a      	ldrh	r2, [r7, #2]
 8002e32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d007      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6c:	d17c      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x10a>
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d16a      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea0:	e057      	b.n	8002f52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11b      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d113      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d119      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x1b8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d014      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f2a:	f7fe fa51 	bl	80013d0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d80b      	bhi.n	8002f52 <HAL_SPI_TransmitReceive+0x1e0>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d007      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002f50:	e0b5      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1a2      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x130>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d19d      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x130>
 8002f66:	e080      	b.n	800306a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_SPI_TransmitReceive+0x204>
 8002f70:	8b7b      	ldrh	r3, [r7, #26]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d16f      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9c:	e05b      	b.n	8003056 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d11c      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x274>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d017      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x274>
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d114      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d119      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x2b6>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003024:	2301      	movs	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003028:	f7fe f9d2 	bl	80013d0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003034:	429a      	cmp	r2, r3
 8003036:	d803      	bhi.n	8003040 <HAL_SPI_TransmitReceive+0x2ce>
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d102      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x2d4>
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003054:	e033      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d19e      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x22c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d199      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8b8 	bl	80031e4 <SPI_EndRxTxTransaction>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003086:	e01a      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b4:	e003      	b.n	80030be <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030e4:	f7fe f974 	bl	80013d0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030f4:	f7fe f96c 	bl	80013d0 <HAL_GetTick>
 80030f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	0d1b      	lsrs	r3, r3, #20
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800310a:	e054      	b.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d050      	beq.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003114:	f7fe f95c 	bl	80013d0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d902      	bls.n	800312a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d13d      	bne.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003142:	d111      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314c:	d004      	beq.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d107      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003170:	d10f      	bne.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e017      	b.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d19b      	bne.n	800310c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000

080031e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff ff6a 	bl	80030d4 <SPI_WaitFlagStateUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e000      	b.n	8003218 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e042      	b.n	80032b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ff86 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9af 	bl	80035c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d16d      	bne.n	80033bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_UART_Transmit+0x2c>
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e066      	b.n	80033be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fe:	f7fe f867 	bl	80013d0 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d108      	bne.n	800332c <HAL_UART_Transmit+0x6c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d104      	bne.n	800332c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e003      	b.n	8003334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003334:	e02a      	b.n	800338c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f8d2 	bl	80034ea <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e036      	b.n	80033be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3302      	adds	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e007      	b.n	800337e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3301      	adds	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1cf      	bne.n	8003336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8a2 	bl	80034ea <UART_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e006      	b.n	80033be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	; 0x28
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d17c      	bne.n	80034e0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_Receive+0x2c>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e075      	b.n	80034e2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	; 0x22
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800340a:	f7fd ffe1 	bl	80013d0 <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	d108      	bne.n	8003438 <HAL_UART_Receive+0x72>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e003      	b.n	8003440 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003440:	e043      	b.n	80034ca <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	2120      	movs	r1, #32
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f84c 	bl	80034ea <UART_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e042      	b.n	80034e2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	b29a      	uxth	r2, r3
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	3302      	adds	r3, #2
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e01f      	b.n	80034bc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d007      	beq.n	8003496 <HAL_UART_Receive+0xd0>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_UART_Receive+0xde>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e008      	b.n	80034b6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1b6      	bne.n	8003442 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b090      	sub	sp, #64	; 0x40
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fa:	e050      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d04c      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <UART_WaitOnFlagUntilTimeout+0x30>
 800350a:	f7fd ff61 	bl	80013d0 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003516:	429a      	cmp	r2, r3
 8003518:	d241      	bcs.n	800359e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353a:	637a      	str	r2, [r7, #52]	; 0x34
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3314      	adds	r3, #20
 8003554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	613b      	str	r3, [r7, #16]
   return(result);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356e:	623a      	str	r2, [r7, #32]
 8003570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	69f9      	ldr	r1, [r7, #28]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	61bb      	str	r3, [r7, #24]
   return(result);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e5      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d09f      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3740      	adds	r7, #64	; 0x40
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003602:	f023 030c 	bic.w	r3, r3, #12
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	430b      	orrs	r3, r1
 800360e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <UART_SetConfig+0x114>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d103      	bne.n	8003638 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7ff f9a6 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	e002      	b.n	800363e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7ff f98e 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 800363c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009a      	lsls	r2, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <UART_SetConfig+0x118>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	0119      	lsls	r1, r3, #4
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <UART_SetConfig+0x118>)
 8003676:	fba3 0302 	umull	r0, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2064      	movs	r0, #100	; 0x64
 800367e:	fb00 f303 	mul.w	r3, r0, r3
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <UART_SetConfig+0x118>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	4419      	add	r1, r3
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009a      	lsls	r2, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <UART_SetConfig+0x118>)
 80036ae:	fba3 0302 	umull	r0, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2064      	movs	r0, #100	; 0x64
 80036b6:	fb00 f303 	mul.w	r3, r0, r3
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	3332      	adds	r3, #50	; 0x32
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <UART_SetConfig+0x118>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	440a      	add	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013800 	.word	0x40013800
 80036e0:	51eb851f 	.word	0x51eb851f

080036e4 <malloc>:
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <malloc+0xc>)
 80036e6:	4601      	mov	r1, r0
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f000 b82b 	b.w	8003744 <_malloc_r>
 80036ee:	bf00      	nop
 80036f0:	20000058 	.word	0x20000058

080036f4 <free>:
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <free+0xc>)
 80036f6:	4601      	mov	r1, r0
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	f000 b901 	b.w	8003900 <_free_r>
 80036fe:	bf00      	nop
 8003700:	20000058 	.word	0x20000058

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0e      	ldr	r6, [pc, #56]	; (8003740 <sbrk_aligned+0x3c>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 f8ac 	bl	800386c <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f8a7 	bl	800386c <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d00a      	beq.n	8003738 <sbrk_aligned+0x34>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d007      	beq.n	800373c <sbrk_aligned+0x38>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f89c 	bl	800386c <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d101      	bne.n	800373c <sbrk_aligned+0x38>
 8003738:	f04f 34ff 	mov.w	r4, #4294967295
 800373c:	4620      	mov	r0, r4
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	2000025c 	.word	0x2000025c

08003744 <_malloc_r>:
 8003744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003748:	1ccd      	adds	r5, r1, #3
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	2d00      	cmp	r5, #0
 8003758:	4607      	mov	r7, r0
 800375a:	db01      	blt.n	8003760 <_malloc_r+0x1c>
 800375c:	42a9      	cmp	r1, r5
 800375e:	d905      	bls.n	800376c <_malloc_r+0x28>
 8003760:	230c      	movs	r3, #12
 8003762:	2600      	movs	r6, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4630      	mov	r0, r6
 8003768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800376c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003840 <_malloc_r+0xfc>
 8003770:	f000 f868 	bl	8003844 <__malloc_lock>
 8003774:	f8d8 3000 	ldr.w	r3, [r8]
 8003778:	461c      	mov	r4, r3
 800377a:	bb5c      	cbnz	r4, 80037d4 <_malloc_r+0x90>
 800377c:	4629      	mov	r1, r5
 800377e:	4638      	mov	r0, r7
 8003780:	f7ff ffc0 	bl	8003704 <sbrk_aligned>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	4604      	mov	r4, r0
 8003788:	d155      	bne.n	8003836 <_malloc_r+0xf2>
 800378a:	f8d8 4000 	ldr.w	r4, [r8]
 800378e:	4626      	mov	r6, r4
 8003790:	2e00      	cmp	r6, #0
 8003792:	d145      	bne.n	8003820 <_malloc_r+0xdc>
 8003794:	2c00      	cmp	r4, #0
 8003796:	d048      	beq.n	800382a <_malloc_r+0xe6>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	4631      	mov	r1, r6
 800379c:	4638      	mov	r0, r7
 800379e:	eb04 0903 	add.w	r9, r4, r3
 80037a2:	f000 f863 	bl	800386c <_sbrk_r>
 80037a6:	4581      	cmp	r9, r0
 80037a8:	d13f      	bne.n	800382a <_malloc_r+0xe6>
 80037aa:	6821      	ldr	r1, [r4, #0]
 80037ac:	4638      	mov	r0, r7
 80037ae:	1a6d      	subs	r5, r5, r1
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7ff ffa7 	bl	8003704 <sbrk_aligned>
 80037b6:	3001      	adds	r0, #1
 80037b8:	d037      	beq.n	800382a <_malloc_r+0xe6>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	442b      	add	r3, r5
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	f8d8 3000 	ldr.w	r3, [r8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d038      	beq.n	800383a <_malloc_r+0xf6>
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	42a2      	cmp	r2, r4
 80037cc:	d12b      	bne.n	8003826 <_malloc_r+0xe2>
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e00f      	b.n	80037f4 <_malloc_r+0xb0>
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	1b52      	subs	r2, r2, r5
 80037d8:	d41f      	bmi.n	800381a <_malloc_r+0xd6>
 80037da:	2a0b      	cmp	r2, #11
 80037dc:	d917      	bls.n	800380e <_malloc_r+0xca>
 80037de:	1961      	adds	r1, r4, r5
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	6025      	str	r5, [r4, #0]
 80037e4:	bf18      	it	ne
 80037e6:	6059      	strne	r1, [r3, #4]
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	bf08      	it	eq
 80037ec:	f8c8 1000 	streq.w	r1, [r8]
 80037f0:	5162      	str	r2, [r4, r5]
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	4638      	mov	r0, r7
 80037f6:	f104 060b 	add.w	r6, r4, #11
 80037fa:	f000 f829 	bl	8003850 <__malloc_unlock>
 80037fe:	f026 0607 	bic.w	r6, r6, #7
 8003802:	1d23      	adds	r3, r4, #4
 8003804:	1af2      	subs	r2, r6, r3
 8003806:	d0ae      	beq.n	8003766 <_malloc_r+0x22>
 8003808:	1b9b      	subs	r3, r3, r6
 800380a:	50a3      	str	r3, [r4, r2]
 800380c:	e7ab      	b.n	8003766 <_malloc_r+0x22>
 800380e:	42a3      	cmp	r3, r4
 8003810:	6862      	ldr	r2, [r4, #4]
 8003812:	d1dd      	bne.n	80037d0 <_malloc_r+0x8c>
 8003814:	f8c8 2000 	str.w	r2, [r8]
 8003818:	e7ec      	b.n	80037f4 <_malloc_r+0xb0>
 800381a:	4623      	mov	r3, r4
 800381c:	6864      	ldr	r4, [r4, #4]
 800381e:	e7ac      	b.n	800377a <_malloc_r+0x36>
 8003820:	4634      	mov	r4, r6
 8003822:	6876      	ldr	r6, [r6, #4]
 8003824:	e7b4      	b.n	8003790 <_malloc_r+0x4c>
 8003826:	4613      	mov	r3, r2
 8003828:	e7cc      	b.n	80037c4 <_malloc_r+0x80>
 800382a:	230c      	movs	r3, #12
 800382c:	4638      	mov	r0, r7
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	f000 f80e 	bl	8003850 <__malloc_unlock>
 8003834:	e797      	b.n	8003766 <_malloc_r+0x22>
 8003836:	6025      	str	r5, [r4, #0]
 8003838:	e7dc      	b.n	80037f4 <_malloc_r+0xb0>
 800383a:	605b      	str	r3, [r3, #4]
 800383c:	deff      	udf	#255	; 0xff
 800383e:	bf00      	nop
 8003840:	20000258 	.word	0x20000258

08003844 <__malloc_lock>:
 8003844:	4801      	ldr	r0, [pc, #4]	; (800384c <__malloc_lock+0x8>)
 8003846:	f000 b84b 	b.w	80038e0 <__retarget_lock_acquire_recursive>
 800384a:	bf00      	nop
 800384c:	2000039c 	.word	0x2000039c

08003850 <__malloc_unlock>:
 8003850:	4801      	ldr	r0, [pc, #4]	; (8003858 <__malloc_unlock+0x8>)
 8003852:	f000 b846 	b.w	80038e2 <__retarget_lock_release_recursive>
 8003856:	bf00      	nop
 8003858:	2000039c 	.word	0x2000039c

0800385c <memset>:
 800385c:	4603      	mov	r3, r0
 800385e:	4402      	add	r2, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <memset+0xa>
 8003864:	4770      	bx	lr
 8003866:	f803 1b01 	strb.w	r1, [r3], #1
 800386a:	e7f9      	b.n	8003860 <memset+0x4>

0800386c <_sbrk_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	2300      	movs	r3, #0
 8003870:	4d05      	ldr	r5, [pc, #20]	; (8003888 <_sbrk_r+0x1c>)
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	f7fd fbde 	bl	8001038 <_sbrk>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_sbrk_r+0x1a>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_sbrk_r+0x1a>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	20000398 	.word	0x20000398

0800388c <__errno>:
 800388c:	4b01      	ldr	r3, [pc, #4]	; (8003894 <__errno+0x8>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000058 	.word	0x20000058

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2600      	movs	r6, #0
 800389c:	4d0c      	ldr	r5, [pc, #48]	; (80038d0 <__libc_init_array+0x38>)
 800389e:	4c0d      	ldr	r4, [pc, #52]	; (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	f000 f872 	bl	8003990 <_init>
 80038ac:	2600      	movs	r6, #0
 80038ae:	4d0a      	ldr	r5, [pc, #40]	; (80038d8 <__libc_init_array+0x40>)
 80038b0:	4c0a      	ldr	r4, [pc, #40]	; (80038dc <__libc_init_array+0x44>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	080039d4 	.word	0x080039d4
 80038d4:	080039d4 	.word	0x080039d4
 80038d8:	080039d4 	.word	0x080039d4
 80038dc:	080039d8 	.word	0x080039d8

080038e0 <__retarget_lock_acquire_recursive>:
 80038e0:	4770      	bx	lr

080038e2 <__retarget_lock_release_recursive>:
 80038e2:	4770      	bx	lr

080038e4 <memcpy>:
 80038e4:	440a      	add	r2, r1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ec:	d100      	bne.n	80038f0 <memcpy+0xc>
 80038ee:	4770      	bx	lr
 80038f0:	b510      	push	{r4, lr}
 80038f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f6:	4291      	cmp	r1, r2
 80038f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fc:	d1f9      	bne.n	80038f2 <memcpy+0xe>
 80038fe:	bd10      	pop	{r4, pc}

08003900 <_free_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	2900      	cmp	r1, #0
 8003906:	d040      	beq.n	800398a <_free_r+0x8a>
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f0c      	subs	r4, r1, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfb8      	it	lt
 8003912:	18e4      	addlt	r4, r4, r3
 8003914:	f7ff ff96 	bl	8003844 <__malloc_lock>
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <_free_r+0x8c>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	b933      	cbnz	r3, 800392c <_free_r+0x2c>
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6014      	str	r4, [r2, #0]
 8003922:	4628      	mov	r0, r5
 8003924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003928:	f7ff bf92 	b.w	8003850 <__malloc_unlock>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d908      	bls.n	8003942 <_free_r+0x42>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	1821      	adds	r1, r4, r0
 8003934:	428b      	cmp	r3, r1
 8003936:	bf01      	itttt	eq
 8003938:	6819      	ldreq	r1, [r3, #0]
 800393a:	685b      	ldreq	r3, [r3, #4]
 800393c:	1809      	addeq	r1, r1, r0
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	e7ed      	b.n	800391e <_free_r+0x1e>
 8003942:	461a      	mov	r2, r3
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b10b      	cbz	r3, 800394c <_free_r+0x4c>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d9fa      	bls.n	8003942 <_free_r+0x42>
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	1850      	adds	r0, r2, r1
 8003950:	42a0      	cmp	r0, r4
 8003952:	d10b      	bne.n	800396c <_free_r+0x6c>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	4401      	add	r1, r0
 8003958:	1850      	adds	r0, r2, r1
 800395a:	4283      	cmp	r3, r0
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	d1e0      	bne.n	8003922 <_free_r+0x22>
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4408      	add	r0, r1
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	e7da      	b.n	8003922 <_free_r+0x22>
 800396c:	d902      	bls.n	8003974 <_free_r+0x74>
 800396e:	230c      	movs	r3, #12
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	e7d6      	b.n	8003922 <_free_r+0x22>
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	1821      	adds	r1, r4, r0
 8003978:	428b      	cmp	r3, r1
 800397a:	bf01      	itttt	eq
 800397c:	6819      	ldreq	r1, [r3, #0]
 800397e:	685b      	ldreq	r3, [r3, #4]
 8003980:	1809      	addeq	r1, r1, r0
 8003982:	6021      	streq	r1, [r4, #0]
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	6054      	str	r4, [r2, #4]
 8003988:	e7cb      	b.n	8003922 <_free_r+0x22>
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000258 	.word	0x20000258

08003990 <_init>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr

0800399c <_fini>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr
