
FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  08003d94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003d94  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d73b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ed  00000000  00000000  0002d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a30e  00000000  00000000  000314e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b45  00000000  00000000  0004b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009475b  00000000  00000000  0005d33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003388  00000000  00000000  000f1a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f4e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003d3c 	.word	0x08003d3c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003d3c 	.word	0x08003d3c

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2uiz>:
 80009c0:	004a      	lsls	r2, r1, #1
 80009c2:	d211      	bcs.n	80009e8 <__aeabi_d2uiz+0x28>
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d211      	bcs.n	80009ee <__aeabi_d2uiz+0x2e>
 80009ca:	d50d      	bpl.n	80009e8 <__aeabi_d2uiz+0x28>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d40e      	bmi.n	80009f4 <__aeabi_d2uiz+0x34>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d102      	bne.n	80009fa <__aeabi_d2uiz+0x3a>
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	4770      	bx	lr
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	4770      	bx	lr

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	203b      	movs	r0, #59	; 0x3b
 8000a24:	f001 f95d 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8000a28:	203b      	movs	r0, #59	; 0x3b
 8000a2a:	f001 f976 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a41      	ldr	r2, [pc, #260]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0320 	and.w	r3, r3, #32
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a35      	ldr	r2, [pc, #212]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0310 	and.w	r3, r3, #16
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <MX_GPIO_Init+0x120>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2170      	movs	r1, #112	; 0x70
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000ab6:	f001 fd91 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f241 4104 	movw	r1, #5124	; 0x1404
 8000ac0:	4828      	ldr	r0, [pc, #160]	; (8000b64 <MX_GPIO_Init+0x128>)
 8000ac2:	f001 fd8b 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCTS_Pin|NRTS_Pin|UART_RESET__Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000acc:	4824      	ldr	r0, [pc, #144]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000ace:	f001 fd85 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RI__GPIO_Port, RI__Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad8:	4823      	ldr	r0, [pc, #140]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000ada:	f001 fd7f 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = OE_Pin|SCLR_Pin|SEN_V_ENABLE_Pin|NCTS_Pin
 8000ade:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000ae2:	613b      	str	r3, [r7, #16]
                          |NRTS_Pin|UART_RESET__Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000af8:	f001 fbdc 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_MEASURING_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 8000afc:	f241 4304 	movw	r3, #5124	; 0x1404
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_GPIO_Init+0x128>)
 8000b16:	f001 fbcd 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RI__Pin;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RI__GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000b34:	f001 fbbe 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_GPIO_Init+0x128>)
 8000b4e:	f001 fbb1 	bl	80022b4 <HAL_GPIO_Init>

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	40010800 	.word	0x40010800

08000b6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <MX_I2C1_Init+0x54>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x58>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000baa:	f001 fd49 	bl	8002640 <HAL_I2C_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb4:	f000 f8fa 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	000186a0 	.word	0x000186a0

08000bc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <HAL_I2C_MspInit+0x70>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d123      	bne.n	8000c30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	2312      	movs	r3, #18
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_I2C_MspInit+0x78>)
 8000c14:	f001 fb4e 	bl	80022b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	61d3      	str	r3, [r2, #28]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b09f      	sub	sp, #124	; 0x7c
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 feed 	bl	8001a28 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f867 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f7ff fef3 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c56:	f7ff fed3 	bl	8000a00 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c5a:	f7ff ff87 	bl	8000b6c <MX_I2C1_Init>
  MX_UART4_Init();
 8000c5e:	f000 fdab 	bl	80017b8 <MX_UART4_Init>
  MX_UART5_Init();
 8000c62:	f000 fdd3 	bl	800180c <MX_UART5_Init>
  MX_SPI1_Init();
 8000c66:	f000 fbeb 	bl	8001440 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c6a:	f000 fc1f 	bl	80014ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  sensor_power_on();
 8000c6e:	f000 f93f 	bl	8000ef0 <sensor_power_on>
  HAL_Delay(250);
 8000c72:	20fa      	movs	r0, #250	; 0xfa
 8000c74:	f000 ff3a 	bl	8001aec <HAL_Delay>


  //reset_UART();

  deactivateSCLR();
 8000c78:	f000 f946 	bl	8000f08 <deactivateSCLR>

  sen1.adr=1;
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main+0xd4>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
  sen1 = sensor_init(sen1.adr);
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <main+0xd4>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4c24      	ldr	r4, [pc, #144]	; (8000d18 <main+0xd4>)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8ab 	bl	8000de8 <sensor_init>
 8000c92:	4620      	mov	r0, r4
 8000c94:	463b      	mov	r3, r7
 8000c96:	2256      	movs	r2, #86	; 0x56
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f003 f841 	bl	8003d20 <memcpy>
  for(int i = 1; i<=NUM_OF_SENSORS; i++)
  {
	  sensors[i] = sensor_init(i);
  }
*/
  if(sen1.ok){
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <main+0xd4>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d034      	beq.n	8000d10 <main+0xcc>
	  while(1)
	  {
		  uint16_t conv_status = read_register(&sen1, CONV_STATUS);
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	481b      	ldr	r0, [pc, #108]	; (8000d18 <main+0xd4>)
 8000caa:	f000 f9cc 	bl	8001046 <read_register>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  int rdy = conv_status&(1<<0xD) ? 1:0;
 8000cb4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000cb8:	135b      	asrs	r3, r3, #13
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	673b      	str	r3, [r7, #112]	; 0x70
		  if(rdy)
 8000cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0ef      	beq.n	8000ca6 <main+0x62>
		  {
			  measuringLED();
 8000cc6:	f000 fb9f 	bl	8001408 <measuringLED>
			  uint16_t x_ch_result = read_register(&sen1, X_CH_RESULT);
 8000cca:	2109      	movs	r1, #9
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <main+0xd4>)
 8000cce:	f000 f9ba 	bl	8001046 <read_register>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			  double x_B = calculate_B(x_ch_result);
 8000cd8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fb37 	bl	8001350 <calculate_B>
 8000ce2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
			  uint8_t x_B_int=((uint8_t)x_B) + '0';
 8000ce6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000cea:	f7ff fe69 	bl	80009c0 <__aeabi_d2uiz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3330      	adds	r3, #48	; 0x30
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			  HAL_UART_Transmit(&huart4, &x_B_int, 1, 50);
 8000cfa:	f107 015f 	add.w	r1, r7, #95	; 0x5f
 8000cfe:	2332      	movs	r3, #50	; 0x32
 8000d00:	2201      	movs	r2, #1
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <main+0xd8>)
 8000d04:	f002 fe60 	bl	80039c8 <HAL_UART_Transmit>
			  HAL_Delay(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f000 feef 	bl	8001aec <HAL_Delay>
	  {
 8000d0e:	e7ca      	b.n	8000ca6 <main+0x62>
  }
  else
  {
	  while(1)
	  {
		  errorLED();
 8000d10:	f000 fb88 	bl	8001424 <errorLED>
 8000d14:	e7fc      	b.n	8000d10 <main+0xcc>
 8000d16:	bf00      	nop
 8000d18:	2000007c 	.word	0x2000007c
 8000d1c:	20000184 	.word	0x20000184

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b090      	sub	sp, #64	; 0x40
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ffca 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fdac 	bl	80028c8 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000d76:	f000 f819 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2102      	movs	r1, #2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 f819 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000da0:	f000 f804 	bl	8000dac <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3740      	adds	r7, #64	; 0x40
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>

08000db6 <writeToRegister>:
#include "spi.h"
#include "spi_handler.h"


void writeToRegister(uint16_t* pRegData,REGISTER_FEATURE pos,uint16_t value)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	70fb      	strb	r3, [r7, #3]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	803b      	strh	r3, [r7, #0]
        value <<= (uint16_t)pos;
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	803b      	strh	r3, [r7, #0]
        *pRegData|=value;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	881a      	ldrh	r2, [r3, #0]
 8000dd4:	883b      	ldrh	r3, [r7, #0]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	801a      	strh	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <sensor_init>:


Sensor sensor_init(uint8_t adr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0b4      	sub	sp, #208	; 0xd0
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
    Sensor sen;
    sen.adr = adr;
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    uint8_t crc_disable[4] = {0x0F,0x00,0x04,0x07};
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <sensor_init+0x100>)
 8000dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint8_t reg_data[4] = {0};
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66bb      	str	r3, [r7, #104]	; 0x68
    uint16_t realRegValue[4]={0};
 8000e02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]


    select_sensor(sen.adr);
 8000e0c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fa49 	bl	80012a8 <select_sensor>
    registers_adr_config(&sen);
 8000e16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f8d4 	bl	8000fc8 <registers_adr_config>
    HAL_SPI_TransmitReceive(&hspi1, crc_disable, reg_data, 4, 50);
 8000e20:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000e24:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000e28:	2332      	movs	r3, #50	; 0x32
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	482f      	ldr	r0, [pc, #188]	; (8000eec <sensor_init+0x104>)
 8000e30:	f002 fb23 	bl	800347a <HAL_SPI_TransmitReceive>
    HAL_Delay(1);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 fe59 	bl	8001aec <HAL_Delay>
    deselect_sensor();
 8000e3a:	f000 fa5b 	bl	80012f4 <deselect_sensor>


    device_config(&sen);
 8000e3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f988 	bl	8001158 <device_config>
    sensor_config(&sen);
 8000e48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f9b9 	bl	80011c4 <sensor_config>
    system_config(&sen);
 8000e52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f9ea 	bl	8001230 <system_config>
    realRegValue[0]=read_register(&sen, TEST_CONFIG);
 8000e5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e60:	210f      	movs	r1, #15
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8ef 	bl	8001046 <read_register>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    realRegValue[1]=read_register(&sen, DEVICE_CONFIG);
 8000e6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f8e6 	bl	8001046 <read_register>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    realRegValue[2]=read_register(&sen, SENSOR_CONFIG);
 8000e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e84:	2101      	movs	r1, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f8dd 	bl	8001046 <read_register>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    realRegValue[3]=read_register(&sen, SYSTEM_CONFIG);
 8000e92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e96:	2102      	movs	r1, #2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f8d4 	bl	8001046 <read_register>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    if(registersAreSet(realRegValue))
 8000ea4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f934 	bl	8001116 <registersAreSet>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00b      	beq.n	8000ecc <sensor_init+0xe4>
    {
    	sen.ok = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    	return sen;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ec2:	2256      	movs	r2, #86	; 0x56
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f002 ff2b 	bl	8003d20 <memcpy>
 8000eca:	e009      	b.n	8000ee0 <sensor_init+0xf8>
    }
    else
    {
    	Sensor error_sensor;
    	error_sensor.ok = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	727b      	strb	r3, [r7, #9]
    	return error_sensor;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2256      	movs	r2, #86	; 0x56
 8000eda:	4619      	mov	r1, r3
 8000edc:	f002 ff20 	bl	8003d20 <memcpy>
    }

}
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	37c8      	adds	r7, #200	; 0xc8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0704000f 	.word	0x0704000f
 8000eec:	200000d4 	.word	0x200000d4

08000ef0 <sensor_power_on>:
{
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin,1);
}

void sensor_power_on()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEN_V_ENABLE_GPIO_Port, SEN_V_ENABLE_Pin,0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <sensor_power_on+0x14>)
 8000efa:	f001 fb6f 	bl	80025dc <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40011000 	.word	0x40011000

08000f08 <deactivateSCLR>:
void deactivateSCLR()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLR_GPIO_Port, SCLR_Pin, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <deactivateSCLR+0x14>)
 8000f12:	f001 fb63 	bl	80025dc <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40011000 	.word	0x40011000

08000f20 <calc_crc>:



uint8_t calc_crc(REGISTER_ADR adr,uint16_t* data)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t xor_result;
	uint8_t crc_polynomial=0x13;
 8000f2c:	2313      	movs	r3, #19
 8000f2e:	74fb      	strb	r3, [r7, #19]
	uint8_t crc_reg = 0x0F;
 8000f30:	230f      	movs	r3, #15
 8000f32:	77fb      	strb	r3, [r7, #31]
	uint8_t message[4] = {adr,(*data)>>8,*data,crc_reg};
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	733b      	strb	r3, [r7, #12]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	737b      	strb	r3, [r7, #13]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	73bb      	strb	r3, [r7, #14]
 8000f4c:	7ffb      	ldrb	r3, [r7, #31]
 8000f4e:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_msb;
	uint8_t msg_msb;
	int j =0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
	for(int i=31;i>=0;i--)
 8000f54:	231f      	movs	r3, #31
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e02a      	b.n	8000fb0 <calc_crc+0x90>
	{
		crc_msb = crc_reg >> 3;
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	74bb      	strb	r3, [r7, #18]
		msg_msb = (message[j]>>(i%8))&0x01;
 8000f60:	f107 020c 	add.w	r2, r7, #12
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	fa42 f303 	asr.w	r3, r2, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	747b      	strb	r3, [r7, #17]
		xor_result = crc_msb ^ msg_msb;
 8000f7e:	7cba      	ldrb	r2, [r7, #18]
 8000f80:	7c7b      	ldrb	r3, [r7, #17]
 8000f82:	4053      	eors	r3, r2
 8000f84:	743b      	strb	r3, [r7, #16]
		crc_reg = crc_reg << 1;
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	77fb      	strb	r3, [r7, #31]

		if(xor_result)
 8000f8c:	7c3b      	ldrb	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <calc_crc+0x7a>
		{
			crc_reg = crc_reg ^ crc_polynomial;
 8000f92:	7ffa      	ldrb	r2, [r7, #31]
 8000f94:	7cfb      	ldrb	r3, [r7, #19]
 8000f96:	4053      	eors	r3, r2
 8000f98:	77fb      	strb	r3, [r7, #31]
		}

		if((i%8)==0){ j++; }
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <calc_crc+0x8a>
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
	for(int i=31;i>=0;i--)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	dad1      	bge.n	8000f5a <calc_crc+0x3a>
	}
	return crc_reg & 0x0F;
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <registers_adr_config>:

void registers_adr_config(Sensor* sen)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	sen->TEST_CONFIG.adr = TEST_CONFIG;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sen->TEST_CONFIG.data = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sen->DEVICE_CONFIG.adr = DEVICE_CONFIG;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	709a      	strb	r2, [r3, #2]
	sen->DEVICE_CONFIG.data = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	809a      	strh	r2, [r3, #4]
	sen->SENSOR_CONFIG.adr = SENSOR_CONFIG;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	719a      	strb	r2, [r3, #6]
	sen->SENSOR_CONFIG.data = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	811a      	strh	r2, [r3, #8]
	sen->SYSTEM_CONFIG.adr = SYSTEM_CONFIG;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	729a      	strb	r2, [r3, #10]
	sen->SYSTEM_CONFIG.data = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	819a      	strh	r2, [r3, #12]
	sen->CONV_STATUS.adr = CONV_STATUS;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2208      	movs	r2, #8
 8001008:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sen->CONV_STATUS.data = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	849a      	strh	r2, [r3, #36]	; 0x24
	sen->X_CH_RESULT.adr = X_CH_RESULT;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2209      	movs	r2, #9
 8001016:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	sen->X_CH_RESULT.data = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	851a      	strh	r2, [r3, #40]	; 0x28
	sen->Y_CH_RESULT.adr = Y_CH_RESULT;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	220a      	movs	r2, #10
 8001024:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	sen->Y_CH_RESULT.data = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	859a      	strh	r2, [r3, #44]	; 0x2c
	sen->Z_CH_RESULT.adr = Z_CH_RESULT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	220b      	movs	r2, #11
 8001032:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	sen->Z_CH_RESULT.data = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	861a      	strh	r2, [r3, #48]	; 0x30

}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <read_register>:

uint16_t read_register(Sensor* sen,REGISTER_ADR reg)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	70fb      	strb	r3, [r7, #3]
	uint16_t* pRegData=NULL;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	uint8_t regAdr = -1;
 8001056:	23ff      	movs	r3, #255	; 0xff
 8001058:	72fb      	strb	r3, [r7, #11]

	if(reg==DEVICE_CONFIG)
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d106      	bne.n	800106e <read_register+0x28>
	{
		pRegData = &(sen->DEVICE_CONFIG.data);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	60fb      	str	r3, [r7, #12]
		regAdr = sen->DEVICE_CONFIG.adr;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	72fb      	strb	r3, [r7, #11]
 800106c:	e03d      	b.n	80010ea <read_register+0xa4>
	}
	else if(reg==SENSOR_CONFIG)
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <read_register+0x3c>
	{
		pRegData = &(sen->SENSOR_CONFIG.data);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3308      	adds	r3, #8
 8001078:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SENSOR_CONFIG.adr;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	799b      	ldrb	r3, [r3, #6]
 800107e:	72fb      	strb	r3, [r7, #11]
 8001080:	e033      	b.n	80010ea <read_register+0xa4>
	}
	else if(reg==SYSTEM_CONFIG)
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d106      	bne.n	8001096 <read_register+0x50>
	{
		pRegData = &(sen->SYSTEM_CONFIG.data);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	330c      	adds	r3, #12
 800108c:	60fb      	str	r3, [r7, #12]
		regAdr = sen->SYSTEM_CONFIG.adr;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7a9b      	ldrb	r3, [r3, #10]
 8001092:	72fb      	strb	r3, [r7, #11]
 8001094:	e029      	b.n	80010ea <read_register+0xa4>
	}
	else if(reg==TEST_CONFIG)
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d107      	bne.n	80010ac <read_register+0x66>
	{
		pRegData = &(sen->TEST_CONFIG.data);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3340      	adds	r3, #64	; 0x40
 80010a0:	60fb      	str	r3, [r7, #12]
		regAdr = sen->TEST_CONFIG.adr;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010a8:	72fb      	strb	r3, [r7, #11]
 80010aa:	e01e      	b.n	80010ea <read_register+0xa4>
	}
	else if(reg==CONV_STATUS)
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d107      	bne.n	80010c2 <read_register+0x7c>
	{
		pRegData = &(sen->CONV_STATUS.data);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3324      	adds	r3, #36	; 0x24
 80010b6:	60fb      	str	r3, [r7, #12]
		regAdr = sen->CONV_STATUS.adr;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80010be:	72fb      	strb	r3, [r7, #11]
 80010c0:	e013      	b.n	80010ea <read_register+0xa4>
	}
	else if(reg==X_CH_RESULT)
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d107      	bne.n	80010d8 <read_register+0x92>
	{
		pRegData = &(sen->X_CH_RESULT.data);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3328      	adds	r3, #40	; 0x28
 80010cc:	60fb      	str	r3, [r7, #12]
		regAdr = sen->X_CH_RESULT.adr;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80010d4:	72fb      	strb	r3, [r7, #11]
 80010d6:	e008      	b.n	80010ea <read_register+0xa4>
	}

	else if((pRegData==NULL)||(regAdr==-1))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <read_register+0x9e>
	{
		return -1;
 80010de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e2:	e014      	b.n	800110e <read_register+0xc8>
	}
	else
	{
		return -1;
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	e011      	b.n	800110e <read_register+0xc8>
	}

	select_sensor(sen->adr);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f8da 	bl	80012a8 <select_sensor>
	*pRegData = spi_read_reg(regAdr, pRegData);
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fa93 	bl	8001624 <spi_read_reg>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	801a      	strh	r2, [r3, #0]
	deselect_sensor();
 8001106:	f000 f8f5 	bl	80012f4 <deselect_sensor>
	return *pRegData;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	881b      	ldrh	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <registersAreSet>:

uint32_t registersAreSet(uint16_t* testReg)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	if((*testReg==0x54) && (*(testReg+1) == 0x2C) && (*(testReg+2) == 0x1055) && (*(testReg+3) == 0x00))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	2b54      	cmp	r3, #84	; 0x54
 8001124:	d112      	bne.n	800114c <registersAreSet+0x36>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3302      	adds	r3, #2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b2c      	cmp	r3, #44	; 0x2c
 800112e:	d10d      	bne.n	800114c <registersAreSet+0x36>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3304      	adds	r3, #4
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	f241 0255 	movw	r2, #4181	; 0x1055
 800113a:	4293      	cmp	r3, r2
 800113c:	d106      	bne.n	800114c <registersAreSet+0x36>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3306      	adds	r3, #6
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <registersAreSet+0x36>
	{
		return 1;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <registersAreSet+0x38>
	}
	else return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <device_config>:
	}
	deselect_sensor();
}

void device_config(Sensor* sen)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	//Current value: 0x2C → 0b0010 1100
	select_sensor(sen->adr);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f89f 	bl	80012a8 <select_sensor>
	uint16_t* pRegData= &(sen->DEVICE_CONFIG.data);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3304      	adds	r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
	writeToRegister(pRegData, CONV_AVG, 0x00); // 1X additional sampling
 8001170:	2200      	movs	r2, #0
 8001172:	210c      	movs	r1, #12
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff fe1e 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, MAG_TEMPCO,0x00); //Temperature coefficient 0%
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff fe19 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, OPERATING_MODE, 0x2); //Continuous conversion
 8001184:	2202      	movs	r2, #2
 8001186:	2104      	movs	r1, #4
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff fe14 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, T_CH_EN, 0x01);
 800118e:	2201      	movs	r2, #1
 8001190:	2103      	movs	r1, #3
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fe0f 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, T_RATE, 0x01);
 8001198:	2201      	movs	r2, #1
 800119a:	2102      	movs	r1, #2
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe0a 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, T_HLT_EN, 0x00);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f7ff fe05 	bl	8000db6 <writeToRegister>


	spi_write_reg(sen->DEVICE_CONFIG.adr, pRegData);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	68f9      	ldr	r1, [r7, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fa6c 	bl	8001690 <spi_write_reg>
	deselect_sensor();
 80011b8:	f000 f89c 	bl	80012f4 <deselect_sensor>
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <sensor_config>:


void sensor_config(Sensor* sen)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	//Current value: 0x1055 → 0b0001 0000 0101 0101
	uint16_t* pRegData= &(sen->SENSOR_CONFIG.data);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3308      	adds	r3, #8
 80011d0:	60fb      	str	r3, [r7, #12]
	select_sensor(sen->adr);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f866 	bl	80012a8 <select_sensor>
	writeToRegister(pRegData,ANGLE_EN ,0x00);
 80011dc:	2200      	movs	r2, #0
 80011de:	210e      	movs	r1, #14
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fde8 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData,SLEEPTIME,0x04);//20ms sleeptime between conversions
 80011e6:	2204      	movs	r2, #4
 80011e8:	210a      	movs	r1, #10
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fde3 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData,MAG_CH_EN,0x1);//Only X chanel enabled
 80011f0:	2201      	movs	r2, #1
 80011f2:	2106      	movs	r1, #6
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff fdde 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData,Z_RANGE,0x1);//+-75mT field range
 80011fa:	2201      	movs	r2, #1
 80011fc:	2104      	movs	r1, #4
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fdd9 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData,Y_RANGE,0x1);//+-75mT field range
 8001204:	2201      	movs	r2, #1
 8001206:	2102      	movs	r1, #2
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff fdd4 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData,X_RANGE,0x1);//+-75mT field range
 800120e:	2201      	movs	r2, #1
 8001210:	2100      	movs	r1, #0
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff fdcf 	bl	8000db6 <writeToRegister>

	spi_write_reg(sen->SENSOR_CONFIG.adr, pRegData);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	799b      	ldrb	r3, [r3, #6]
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fa36 	bl	8001690 <spi_write_reg>
	deselect_sensor();
 8001224:	f000 f866 	bl	80012f4 <deselect_sensor>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <system_config>:

void system_config(Sensor* sen)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	//Current value: 0x00
	uint16_t* pRegData= &(sen->SYSTEM_CONFIG.data);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	330c      	adds	r3, #12
 800123c:	60fb      	str	r3, [r7, #12]
	select_sensor(sen->adr);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f830 	bl	80012a8 <select_sensor>
	writeToRegister(pRegData, DIAG_SEL, 0x00);
 8001248:	2200      	movs	r2, #0
 800124a:	210c      	movs	r1, #12
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fdb2 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, TRIGGER_MODE, 0x00); //Conversion on CS pulse
 8001252:	2200      	movs	r2, #0
 8001254:	2109      	movs	r1, #9
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fdad 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, DATA_TYPE, 0x00);
 800125c:	2200      	movs	r2, #0
 800125e:	2106      	movs	r1, #6
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff fda8 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, DIAG_EN, 0x00);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fda3 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, Z_HLT_EN, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2102      	movs	r1, #2
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fd9e 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, Y_HLT_EN, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fd99 	bl	8000db6 <writeToRegister>
	writeToRegister(pRegData, X_HLT_EN, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff fd94 	bl	8000db6 <writeToRegister>

	spi_write_reg(sen->SYSTEM_CONFIG.adr, pRegData);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a9b      	ldrb	r3, [r3, #10]
 8001292:	68f9      	ldr	r1, [r7, #12]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f9fb 	bl	8001690 <spi_write_reg>
	deselect_sensor();
 800129a:	f000 f82b 	bl	80012f4 <deselect_sensor>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <select_sensor>:

void select_sensor(uint8_t adr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	uint16_t message = ~(1 << (8-adr + 7));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f1c3 030f 	rsb	r3, r3, #15
 80012b8:	2201      	movs	r2, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	81fb      	strh	r3, [r7, #14]
    set_sh_reg_OE(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 f830 	bl	800132c <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&message, 2, 50);
 80012cc:	f107 010e 	add.w	r1, r7, #14
 80012d0:	2332      	movs	r3, #50	; 0x32
 80012d2:	2202      	movs	r2, #2
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <select_sensor+0x48>)
 80012d6:	f001 ff8d 	bl	80031f4 <HAL_SPI_Transmit>
    HAL_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fc06 	bl	8001aec <HAL_Delay>
    set_sh_reg_OE(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 f823 	bl	800132c <set_sh_reg_OE>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000012c 	.word	0x2000012c

080012f4 <deselect_sensor>:

void deselect_sensor()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint16_t message = 0xFFFF;
 80012fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fe:	80fb      	strh	r3, [r7, #6]
    set_sh_reg_OE(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f000 f813 	bl	800132c <set_sh_reg_OE>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&message, 2, 50);
 8001306:	1db9      	adds	r1, r7, #6
 8001308:	2332      	movs	r3, #50	; 0x32
 800130a:	2202      	movs	r2, #2
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <deselect_sensor+0x34>)
 800130e:	f001 ff71 	bl	80031f4 <HAL_SPI_Transmit>
    HAL_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fbea 	bl	8001aec <HAL_Delay>
    set_sh_reg_OE(0);
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f807 	bl	800132c <set_sh_reg_OE>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000012c 	.word	0x2000012c

0800132c <set_sh_reg_OE>:

void set_sh_reg_OE(uint32_t value)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, value);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	2110      	movs	r1, #16
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <set_sh_reg_OE+0x20>)
 800133e:	f001 f94d 	bl	80025dc <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40011000 	.word	0x40011000

08001350 <calculate_B>:

double calculate_B(uint16_t data)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
	double B;
	double sum;
	for(int i=0;i<=14;i++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e018      	b.n	8001392 <calculate_B+0x42>
	{
		sum += ((data&(1<<i))*(1<<i));
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	2101      	movs	r1, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8a8 	bl	80004c8 <__aeabi_i2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001380:	f7fe ff56 	bl	8000230 <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int i=0;i<=14;i++)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b0e      	cmp	r3, #14
 8001396:	dde3      	ble.n	8001360 <calculate_B+0x10>
	}

	B = ((-((data&(1<<15))*(2<<15)) + sum)/(1<<16))*2*0.075;
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800139e:	4613      	mov	r3, r2
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f88e 	bl	80004c8 <__aeabi_i2d>
 80013ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b0:	f7fe ff3e 	bl	8000230 <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <calculate_B+0xb0>)
 80013c2:	f7ff fa15 	bl	80007f0 <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	f7fe ff2d 	bl	8000230 <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <calculate_B+0xb4>)
 80013e4:	f7ff f8da 	bl	800059c <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return B;
 80013f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40f00000 	.word	0x40f00000
 8001404:	3fb33333 	.word	0x3fb33333

08001408 <measuringLED>:

void measuringLED()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_MEASURING_GPIO_Port, LED_MEASURING_Pin);
 800140c:	2104      	movs	r1, #4
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <measuringLED+0x18>)
 8001410:	f001 f8fc 	bl	800260c <HAL_GPIO_TogglePin>
	  HAL_Delay(2);
 8001414:	2002      	movs	r0, #2
 8001416:	f000 fb69 	bl	8001aec <HAL_Delay>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40010c00 	.word	0x40010c00

08001424 <errorLED>:

void errorLED()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 8001428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <errorLED+0x18>)
 800142e:	f001 f8ed 	bl	800260c <HAL_GPIO_TogglePin>
	HAL_Delay(2);
 8001432:	2002      	movs	r0, #2
 8001434:	f000 fb5a 	bl	8001aec <HAL_Delay>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010c00 	.word	0x40010c00

08001440 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_SPI1_Init+0x64>)
 800144c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_SPI1_Init+0x64>)
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001474:	2210      	movs	r2, #16
 8001476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SPI1_Init+0x64>)
 800148c:	220a      	movs	r2, #10
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_SPI1_Init+0x64>)
 8001492:	f001 fe2b 	bl	80030ec <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800149c:	f7ff fc86 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000d4 	.word	0x200000d4
 80014a8:	40013000 	.word	0x40013000

080014ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_SPI2_Init+0x64>)
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_SPI2_Init+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI2_Init+0x64>)
 80014b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI2_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_SPI2_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI2_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI2_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI2_Init+0x64>)
 80014d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI2_Init+0x64>)
 80014e0:	2230      	movs	r2, #48	; 0x30
 80014e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_SPI2_Init+0x64>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI2_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_SPI2_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI2_Init+0x64>)
 80014f8:	220a      	movs	r2, #10
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_SPI2_Init+0x64>)
 80014fe:	f001 fdf5 	bl	80030ec <HAL_SPI_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001508:	f7ff fc50 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000012c 	.word	0x2000012c
 8001514:	40003800 	.word	0x40003800

08001518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a37      	ldr	r2, [pc, #220]	; (8001610 <HAL_SPI_MspInit+0xf8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d130      	bne.n	800159a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a35      	ldr	r2, [pc, #212]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4619      	mov	r1, r3
 800157a:	4827      	ldr	r0, [pc, #156]	; (8001618 <HAL_SPI_MspInit+0x100>)
 800157c:	f000 fe9a 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	4619      	mov	r1, r3
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <HAL_SPI_MspInit+0x100>)
 8001594:	f000 fe8e 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001598:	e036      	b.n	8001608 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <HAL_SPI_MspInit+0x104>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d131      	bne.n	8001608 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_SPI_MspInit+0xfc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SCK_SHREG_Pin|MOSI_SHREG_Pin;
 80015d4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_SPI_MspInit+0x108>)
 80015ea:	f000 fe63 	bl	80022b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_SHREG_Pin;
 80015ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MISO_SHREG_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <HAL_SPI_MspInit+0x108>)
 8001604:	f000 fe56 	bl	80022b4 <HAL_GPIO_Init>
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013000 	.word	0x40013000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010800 	.word	0x40010800
 800161c:	40003800 	.word	0x40003800
 8001620:	40010c00 	.word	0x40010c00

08001624 <spi_read_reg>:
#include "main.h"

#define SPI_MESSAGE_LENGTH 4

uint16_t spi_read_reg(uint8_t regAdr, uint16_t *stat)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[4]={0x00};
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
	uint8_t rxData[4]={0x00};
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
	uint16_t msg;
	HAL_StatusTypeDef status;
	regAdr |= 0x80; //MSB 1 for reading
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163e:	71fb      	strb	r3, [r7, #7]
	txData[0] = regAdr;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	743b      	strb	r3, [r7, #16]
	status = HAL_SPI_TransmitReceive(&hspi1,txData,rxData,4,50);
 8001644:	f107 020c 	add.w	r2, r7, #12
 8001648:	f107 0110 	add.w	r1, r7, #16
 800164c:	2332      	movs	r3, #50	; 0x32
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2304      	movs	r3, #4
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <spi_read_reg+0x68>)
 8001654:	f001 ff11 	bl	800347a <HAL_SPI_TransmitReceive>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
	*stat = (rxData[0]<<8) + rxData[3];
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	b29b      	uxth	r3, r3
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b29a      	uxth	r2, r3
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	801a      	strh	r2, [r3, #0]
	msg = ((rxData[1]<<8) + rxData[2]);
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	b29b      	uxth	r3, r3
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29a      	uxth	r2, r3
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	82bb      	strh	r3, [r7, #20]
	return msg;
 8001680:	8abb      	ldrh	r3, [r7, #20]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000d4 	.word	0x200000d4

08001690 <spi_write_reg>:

void spi_write_reg(REGISTER_ADR regAdr,uint16_t* pRegData)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
	uint8_t message[4];
	HAL_StatusTypeDef status;
	regAdr |= 0x00;              //First MSB bitm must be
	message[0] = regAdr;         //Write an address with first bit set to 0
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	723b      	strb	r3, [r7, #8]
	message[1] = *pRegData>>8;    //Write data to register 8MSB bits
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	727b      	strb	r3, [r7, #9]
	message[2] = *pRegData;       //Write data to register 8LSB bits
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	72bb      	strb	r3, [r7, #10]
	message[3] = calc_crc(regAdr, pRegData); //TODO: CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        //Write cmd to start conversion on next CS going high
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc31 	bl	8000f20 <calc_crc>
 80016be:	4603      	mov	r3, r0
 80016c0:	72fb      	strb	r3, [r7, #11]
	status = HAL_SPI_Transmit(&hspi1, message, SPI_MESSAGE_LENGTH, HAL_MAX_DELAY);
 80016c2:	f107 0108 	add.w	r1, r7, #8
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	2204      	movs	r2, #4
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <spi_write_reg+0x50>)
 80016ce:	f001 fd91 	bl	80031f4 <HAL_SPI_Transmit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000d4 	.word	0x200000d4

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f991 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <DMA2_Channel4_5_IRQHandler+0x10>)
 800179e:	f000 fb4d 	bl	8001e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000214 	.word	0x20000214

080017ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_UART4_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_UART4_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_UART4_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_UART4_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_UART4_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_UART4_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_UART4_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_UART4_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_UART4_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_UART4_Init+0x4c>)
 80017f0:	f002 f89a 	bl	8003928 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80017fa:	f7ff fad7 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000184 	.word	0x20000184
 8001808:	40004c00 	.word	0x40004c00

0800180c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_UART5_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_UART5_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_UART5_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_UART5_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_UART5_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_UART5_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_UART5_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_UART5_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_UART5_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_UART5_Init+0x4c>)
 8001844:	f002 f870 	bl	8003928 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800184e:	f7ff faad 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001cc 	.word	0x200001cc
 800185c:	40005000 	.word	0x40005000

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_UART_MspInit+0x160>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d158      	bne.n	8001932 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800188a:	61d3      	str	r3, [r2, #28]
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_UART_MspInit+0x164>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	4619      	mov	r1, r3
 80018c4:	4840      	ldr	r0, [pc, #256]	; (80019c8 <HAL_UART_MspInit+0x168>)
 80018c6:	f000 fcf5 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	4619      	mov	r1, r3
 80018de:	483a      	ldr	r0, [pc, #232]	; (80019c8 <HAL_UART_MspInit+0x168>)
 80018e0:	f000 fce8 	bl	80022b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018e6:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <HAL_UART_MspInit+0x170>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018ec:	2210      	movs	r2, #16
 80018ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_UART_MspInit+0x16c>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_UART_MspInit+0x16c>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_UART_MspInit+0x16c>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001914:	482d      	ldr	r0, [pc, #180]	; (80019cc <HAL_UART_MspInit+0x16c>)
 8001916:	f000 fa1b 	bl	8001d50 <HAL_DMA_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001920:	f7ff fa44 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <HAL_UART_MspInit+0x16c>)
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
 800192a:	4a28      	ldr	r2, [pc, #160]	; (80019cc <HAL_UART_MspInit+0x16c>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001930:	e041      	b.n	80019b6 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==UART5)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13c      	bne.n	80019b6 <HAL_UART_MspInit+0x156>
    __HAL_RCC_UART5_CLK_ENABLE();
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001946:	61d3      	str	r3, [r2, #28]
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <HAL_UART_MspInit+0x168>)
 800199a:	f000 fc8b 	bl	80022b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_UART_MspInit+0x178>)
 80019b2:	f000 fc7f 	bl	80022b4 <HAL_GPIO_Init>
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004c00 	.word	0x40004c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40011000 	.word	0x40011000
 80019cc:	20000214 	.word	0x20000214
 80019d0:	40020458 	.word	0x40020458
 80019d4:	40005000 	.word	0x40005000
 80019d8:	40011400 	.word	0x40011400

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fee6 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	; (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	; (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f002 f967 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff f91b 	bl	8000c44 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a18:	08003d88 	.word	0x08003d88
  ldr r2, =_sbss
 8001a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a20:	2000025c 	.word	0x2000025c

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f947 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fe4e 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f95f 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f927 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000258 	.word	0x20000258

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000258 	.word	0x20000258

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4906      	ldr	r1, [pc, #24]	; (8001bcc <__NVIC_EnableIRQ+0x34>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff90 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff2d 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff42 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e059      	b.n	8001e1a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_DMA_Init+0xd4>)
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d80f      	bhi.n	8001d92 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_DMA_Init+0xd8>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_DMA_Init+0xdc>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	; (8001e30 <HAL_DMA_Init+0xe0>)
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d90:	e00e      	b.n	8001db0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_DMA_Init+0xe4>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_DMA_Init+0xdc>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_DMA_Init+0xe8>)
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dc6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40020407 	.word	0x40020407
 8001e28:	bffdfff8 	.word	0xbffdfff8
 8001e2c:	cccccccd 	.word	0xcccccccd
 8001e30:	40020000 	.word	0x40020000
 8001e34:	bffdfbf8 	.word	0xbffdfbf8
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2204      	movs	r2, #4
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80f1 	beq.w	8002048 <HAL_DMA_IRQHandler+0x20c>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80eb 	beq.w	8002048 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <HAL_DMA_IRQHandler+0x1d8>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d958      	bls.n	8001f4e <HAL_DMA_IRQHandler+0x112>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_DMA_IRQHandler+0x1dc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04f      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x10a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	; (800201c <HAL_DMA_IRQHandler+0x1e0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d048      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x106>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_DMA_IRQHandler+0x1e4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x100>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	; (8002024 <HAL_DMA_IRQHandler+0x1e8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d038      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xfa>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_DMA_IRQHandler+0x1ec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d030      	beq.n	8001f30 <HAL_DMA_IRQHandler+0xf4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_DMA_IRQHandler+0x1f0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d028      	beq.n	8001f2a <HAL_DMA_IRQHandler+0xee>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_DMA_IRQHandler+0x1d8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d020      	beq.n	8001f24 <HAL_DMA_IRQHandler+0xe8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_DMA_IRQHandler+0x1f4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d019      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xe4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	; (8002034 <HAL_DMA_IRQHandler+0x1f8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d012      	beq.n	8001f1c <HAL_DMA_IRQHandler+0xe0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_DMA_IRQHandler+0x1fc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00a      	beq.n	8001f16 <HAL_DMA_IRQHandler+0xda>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4d      	ldr	r2, [pc, #308]	; (800203c <HAL_DMA_IRQHandler+0x200>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d102      	bne.n	8001f10 <HAL_DMA_IRQHandler+0xd4>
 8001f0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f0e:	e01b      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f14:	e018      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1a:	e015      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	e013      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e011      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f28:	e00e      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f2e:	e00b      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f34:	e008      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f3a:	e005      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f40:	e002      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	e000      	b.n	8001f48 <HAL_DMA_IRQHandler+0x10c>
 8001f46:	2304      	movs	r3, #4
 8001f48:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <HAL_DMA_IRQHandler+0x204>)
 8001f4a:	6053      	str	r3, [r2, #4]
 8001f4c:	e057      	b.n	8001ffe <HAL_DMA_IRQHandler+0x1c2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_DMA_IRQHandler+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04f      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x1bc>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_DMA_IRQHandler+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d048      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x1b8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_DMA_IRQHandler+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_IRQHandler+0x1b2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <HAL_DMA_IRQHandler+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d038      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x1ac>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <HAL_DMA_IRQHandler+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d030      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x1a6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d028      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x1a0>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a21      	ldr	r2, [pc, #132]	; (8002014 <HAL_DMA_IRQHandler+0x1d8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d020      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x19a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_DMA_IRQHandler+0x1f4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x196>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_DMA_IRQHandler+0x1f8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d012      	beq.n	8001fce <HAL_DMA_IRQHandler+0x192>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_DMA_IRQHandler+0x1fc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x18c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_DMA_IRQHandler+0x200>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x186>
 8001fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc0:	e01b      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fc6:	e018      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fcc:	e015      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	e013      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e011      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fda:	e00e      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fe0:	e00b      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fe6:	e008      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff2:	e002      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1be>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_DMA_IRQHandler+0x208>)
 8001ffc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8136 	beq.w	8002274 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002010:	e130      	b.n	8002274 <HAL_DMA_IRQHandler+0x438>
 8002012:	bf00      	nop
 8002014:	40020080 	.word	0x40020080
 8002018:	40020008 	.word	0x40020008
 800201c:	4002001c 	.word	0x4002001c
 8002020:	40020030 	.word	0x40020030
 8002024:	40020044 	.word	0x40020044
 8002028:	40020058 	.word	0x40020058
 800202c:	4002006c 	.word	0x4002006c
 8002030:	40020408 	.word	0x40020408
 8002034:	4002041c 	.word	0x4002041c
 8002038:	40020430 	.word	0x40020430
 800203c:	40020444 	.word	0x40020444
 8002040:	40020400 	.word	0x40020400
 8002044:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2202      	movs	r2, #2
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80dd 	beq.w	8002214 <HAL_DMA_IRQHandler+0x3d8>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80d7 	beq.w	8002214 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020a 	bic.w	r2, r2, #10
 8002082:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_DMA_IRQHandler+0x444>)
 8002094:	429a      	cmp	r2, r3
 8002096:	d958      	bls.n	800214a <HAL_DMA_IRQHandler+0x30e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a79      	ldr	r2, [pc, #484]	; (8002284 <HAL_DMA_IRQHandler+0x448>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d04f      	beq.n	8002142 <HAL_DMA_IRQHandler+0x306>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_DMA_IRQHandler+0x44c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d048      	beq.n	800213e <HAL_DMA_IRQHandler+0x302>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a76      	ldr	r2, [pc, #472]	; (800228c <HAL_DMA_IRQHandler+0x450>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d040      	beq.n	8002138 <HAL_DMA_IRQHandler+0x2fc>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_DMA_IRQHandler+0x454>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d038      	beq.n	8002132 <HAL_DMA_IRQHandler+0x2f6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a73      	ldr	r2, [pc, #460]	; (8002294 <HAL_DMA_IRQHandler+0x458>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d030      	beq.n	800212c <HAL_DMA_IRQHandler+0x2f0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_DMA_IRQHandler+0x45c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d028      	beq.n	8002126 <HAL_DMA_IRQHandler+0x2ea>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_DMA_IRQHandler+0x444>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d020      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2e4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_DMA_IRQHandler+0x460>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d019      	beq.n	800211c <HAL_DMA_IRQHandler+0x2e0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6c      	ldr	r2, [pc, #432]	; (80022a0 <HAL_DMA_IRQHandler+0x464>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d012      	beq.n	8002118 <HAL_DMA_IRQHandler+0x2dc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6b      	ldr	r2, [pc, #428]	; (80022a4 <HAL_DMA_IRQHandler+0x468>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00a      	beq.n	8002112 <HAL_DMA_IRQHandler+0x2d6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <HAL_DMA_IRQHandler+0x46c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d102      	bne.n	800210c <HAL_DMA_IRQHandler+0x2d0>
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210a:	e01b      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 800210c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002110:	e018      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	e015      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002118:	2320      	movs	r3, #32
 800211a:	e013      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 800211c:	2302      	movs	r3, #2
 800211e:	e011      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	e00e      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002126:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800212a:	e00b      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 800212c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002130:	e008      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	e005      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213c:	e002      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 800213e:	2320      	movs	r3, #32
 8002140:	e000      	b.n	8002144 <HAL_DMA_IRQHandler+0x308>
 8002142:	2302      	movs	r3, #2
 8002144:	4a59      	ldr	r2, [pc, #356]	; (80022ac <HAL_DMA_IRQHandler+0x470>)
 8002146:	6053      	str	r3, [r2, #4]
 8002148:	e057      	b.n	80021fa <HAL_DMA_IRQHandler+0x3be>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_DMA_IRQHandler+0x448>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d04f      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x3b8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4b      	ldr	r2, [pc, #300]	; (8002288 <HAL_DMA_IRQHandler+0x44c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d048      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x3b4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <HAL_DMA_IRQHandler+0x450>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d040      	beq.n	80021ea <HAL_DMA_IRQHandler+0x3ae>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_DMA_IRQHandler+0x454>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d038      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x3a8>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a47      	ldr	r2, [pc, #284]	; (8002294 <HAL_DMA_IRQHandler+0x458>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d030      	beq.n	80021de <HAL_DMA_IRQHandler+0x3a2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a45      	ldr	r2, [pc, #276]	; (8002298 <HAL_DMA_IRQHandler+0x45c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d028      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x39c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <HAL_DMA_IRQHandler+0x444>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d020      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x396>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a41      	ldr	r2, [pc, #260]	; (800229c <HAL_DMA_IRQHandler+0x460>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d019      	beq.n	80021ce <HAL_DMA_IRQHandler+0x392>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a40      	ldr	r2, [pc, #256]	; (80022a0 <HAL_DMA_IRQHandler+0x464>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d012      	beq.n	80021ca <HAL_DMA_IRQHandler+0x38e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_DMA_IRQHandler+0x468>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x388>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_DMA_IRQHandler+0x46c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <HAL_DMA_IRQHandler+0x382>
 80021b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021bc:	e01b      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c2:	e018      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c8:	e015      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021ca:	2320      	movs	r3, #32
 80021cc:	e013      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e011      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d6:	e00e      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021dc:	e00b      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e2:	e008      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e8:	e005      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ee:	e002      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021f0:	2320      	movs	r3, #32
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_IRQHandler+0x3ba>
 80021f4:	2302      	movs	r3, #2
 80021f6:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_DMA_IRQHandler+0x474>)
 80021f8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	2b00      	cmp	r3, #0
 8002208:	d034      	beq.n	8002274 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002212:	e02f      	b.n	8002274 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2208      	movs	r2, #8
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d028      	beq.n	8002276 <HAL_DMA_IRQHandler+0x43a>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d023      	beq.n	8002276 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 020e 	bic.w	r2, r2, #14
 800223c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    }
  }
  return;
 8002274:	bf00      	nop
 8002276:	bf00      	nop
}
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020080 	.word	0x40020080
 8002284:	40020008 	.word	0x40020008
 8002288:	4002001c 	.word	0x4002001c
 800228c:	40020030 	.word	0x40020030
 8002290:	40020044 	.word	0x40020044
 8002294:	40020058 	.word	0x40020058
 8002298:	4002006c 	.word	0x4002006c
 800229c:	40020408 	.word	0x40020408
 80022a0:	4002041c 	.word	0x4002041c
 80022a4:	40020430 	.word	0x40020430
 80022a8:	40020444 	.word	0x40020444
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b08b      	sub	sp, #44	; 0x2c
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c6:	e179      	b.n	80025bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c8:	2201      	movs	r2, #1
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 8168 	bne.w	80025b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a96      	ldr	r2, [pc, #600]	; (8002544 <HAL_GPIO_Init+0x290>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d05e      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 80022f0:	4a94      	ldr	r2, [pc, #592]	; (8002544 <HAL_GPIO_Init+0x290>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d875      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 80022f6:	4a94      	ldr	r2, [pc, #592]	; (8002548 <HAL_GPIO_Init+0x294>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d058      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 80022fc:	4a92      	ldr	r2, [pc, #584]	; (8002548 <HAL_GPIO_Init+0x294>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d86f      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 8002302:	4a92      	ldr	r2, [pc, #584]	; (800254c <HAL_GPIO_Init+0x298>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d052      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002308:	4a90      	ldr	r2, [pc, #576]	; (800254c <HAL_GPIO_Init+0x298>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d869      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800230e:	4a90      	ldr	r2, [pc, #576]	; (8002550 <HAL_GPIO_Init+0x29c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d04c      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002314:	4a8e      	ldr	r2, [pc, #568]	; (8002550 <HAL_GPIO_Init+0x29c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d863      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800231a:	4a8e      	ldr	r2, [pc, #568]	; (8002554 <HAL_GPIO_Init+0x2a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d046      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
 8002320:	4a8c      	ldr	r2, [pc, #560]	; (8002554 <HAL_GPIO_Init+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d85d      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d82a      	bhi.n	8002380 <HAL_GPIO_Init+0xcc>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d859      	bhi.n	80023e2 <HAL_GPIO_Init+0x12e>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <HAL_GPIO_Init+0x80>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	080023af 	.word	0x080023af
 8002338:	08002389 	.word	0x08002389
 800233c:	0800239b 	.word	0x0800239b
 8002340:	080023dd 	.word	0x080023dd
 8002344:	080023e3 	.word	0x080023e3
 8002348:	080023e3 	.word	0x080023e3
 800234c:	080023e3 	.word	0x080023e3
 8002350:	080023e3 	.word	0x080023e3
 8002354:	080023e3 	.word	0x080023e3
 8002358:	080023e3 	.word	0x080023e3
 800235c:	080023e3 	.word	0x080023e3
 8002360:	080023e3 	.word	0x080023e3
 8002364:	080023e3 	.word	0x080023e3
 8002368:	080023e3 	.word	0x080023e3
 800236c:	080023e3 	.word	0x080023e3
 8002370:	080023e3 	.word	0x080023e3
 8002374:	080023e3 	.word	0x080023e3
 8002378:	08002391 	.word	0x08002391
 800237c:	080023a5 	.word	0x080023a5
 8002380:	4a75      	ldr	r2, [pc, #468]	; (8002558 <HAL_GPIO_Init+0x2a4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002386:	e02c      	b.n	80023e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e029      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	3304      	adds	r3, #4
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e024      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	3308      	adds	r3, #8
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e01f      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	330c      	adds	r3, #12
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e01a      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b6:	2304      	movs	r3, #4
 80023b8:	623b      	str	r3, [r7, #32]
          break;
 80023ba:	e013      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c4:	2308      	movs	r3, #8
 80023c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	611a      	str	r2, [r3, #16]
          break;
 80023ce:	e009      	b.n	80023e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	615a      	str	r2, [r3, #20]
          break;
 80023da:	e003      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x130>
          break;
 80023e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2bff      	cmp	r3, #255	; 0xff
 80023e8:	d801      	bhi.n	80023ee <HAL_GPIO_Init+0x13a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_Init+0x13e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2bff      	cmp	r3, #255	; 0xff
 80023f8:	d802      	bhi.n	8002400 <HAL_GPIO_Init+0x14c>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x152>
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3b08      	subs	r3, #8
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	210f      	movs	r1, #15
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80c1 	beq.w	80025b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002434:	4b49      	ldr	r3, [pc, #292]	; (800255c <HAL_GPIO_Init+0x2a8>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a48      	ldr	r2, [pc, #288]	; (800255c <HAL_GPIO_Init+0x2a8>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_GPIO_Init+0x2a8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800244c:	4a44      	ldr	r2, [pc, #272]	; (8002560 <HAL_GPIO_Init+0x2ac>)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <HAL_GPIO_Init+0x2b0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01f      	beq.n	80024b8 <HAL_GPIO_Init+0x204>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_GPIO_Init+0x2b4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d019      	beq.n	80024b4 <HAL_GPIO_Init+0x200>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_GPIO_Init+0x2b8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1fc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <HAL_GPIO_Init+0x2bc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1f8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a38      	ldr	r2, [pc, #224]	; (8002574 <HAL_GPIO_Init+0x2c0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1f4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a37      	ldr	r2, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x2c4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1f0>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e00a      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024a4:	2306      	movs	r3, #6
 80024a6:	e008      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x206>
 80024b8:	2300      	movs	r3, #0
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ca:	4925      	ldr	r1, [pc, #148]	; (8002560 <HAL_GPIO_Init+0x2ac>)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_GPIO_Init+0x2c8>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4924      	ldr	r1, [pc, #144]	; (800257c <HAL_GPIO_Init+0x2c8>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_GPIO_Init+0x2c8>)
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4920      	ldr	r1, [pc, #128]	; (800257c <HAL_GPIO_Init+0x2c8>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_GPIO_Init+0x2c8>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	491a      	ldr	r1, [pc, #104]	; (800257c <HAL_GPIO_Init+0x2c8>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_GPIO_Init+0x2c8>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_GPIO_Init+0x2c8>)
 8002524:	4013      	ands	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d025      	beq.n	8002580 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_GPIO_Init+0x2c8>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4910      	ldr	r1, [pc, #64]	; (800257c <HAL_GPIO_Init+0x2c8>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e025      	b.n	800258e <HAL_GPIO_Init+0x2da>
 8002542:	bf00      	nop
 8002544:	10320000 	.word	0x10320000
 8002548:	10310000 	.word	0x10310000
 800254c:	10220000 	.word	0x10220000
 8002550:	10210000 	.word	0x10210000
 8002554:	10120000 	.word	0x10120000
 8002558:	10110000 	.word	0x10110000
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	40010800 	.word	0x40010800
 8002568:	40010c00 	.word	0x40010c00
 800256c:	40011000 	.word	0x40011000
 8002570:	40011400 	.word	0x40011400
 8002574:	40011800 	.word	0x40011800
 8002578:	40011c00 	.word	0x40011c00
 800257c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_GPIO_Init+0x324>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4913      	ldr	r1, [pc, #76]	; (80025d8 <HAL_GPIO_Init+0x324>)
 800258a:	4013      	ands	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_GPIO_Init+0x324>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_GPIO_Init+0x324>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e006      	b.n	80025b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_GPIO_Init+0x324>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4909      	ldr	r1, [pc, #36]	; (80025d8 <HAL_GPIO_Init+0x324>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f ae7e 	bne.w	80022c8 <HAL_GPIO_Init+0x14>
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	372c      	adds	r7, #44	; 0x2c
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43d9      	mvns	r1, r3
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	400b      	ands	r3, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e12b      	b.n	80028aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe faae 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a4:	f000 fcdc 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a81      	ldr	r2, [pc, #516]	; (80028b4 <HAL_I2C_Init+0x274>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d807      	bhi.n	80026c4 <HAL_I2C_Init+0x84>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a80      	ldr	r2, [pc, #512]	; (80028b8 <HAL_I2C_Init+0x278>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e006      	b.n	80026d2 <HAL_I2C_Init+0x92>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a7d      	ldr	r2, [pc, #500]	; (80028bc <HAL_I2C_Init+0x27c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0e7      	b.n	80028aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a78      	ldr	r2, [pc, #480]	; (80028c0 <HAL_I2C_Init+0x280>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_I2C_Init+0x274>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d802      	bhi.n	8002714 <HAL_I2C_Init+0xd4>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	e009      	b.n	8002728 <HAL_I2C_Init+0xe8>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_I2C_Init+0x284>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	3301      	adds	r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800273a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	495c      	ldr	r1, [pc, #368]	; (80028b4 <HAL_I2C_Init+0x274>)
 8002744:	428b      	cmp	r3, r1
 8002746:	d819      	bhi.n	800277c <HAL_I2C_Init+0x13c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e59      	subs	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fbb1 f3f3 	udiv	r3, r1, r3
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	f640 73fc 	movw	r3, #4092	; 0xffc
 800275c:	400b      	ands	r3, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_I2C_Init+0x138>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e59      	subs	r1, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	e051      	b.n	800281c <HAL_I2C_Init+0x1dc>
 8002778:	2304      	movs	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x168>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x18e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x196>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e272      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8087 	beq.w	80029f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e8:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d00c      	beq.n	800290e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f4:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d112      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d10b      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x12c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d168      	bne.n	80029f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e24c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x76>
 8002930:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e02e      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7a      	ldr	r2, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0xbc>
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff f898 	bl	8001ad8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f894 	bl	8001ad8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e200      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xe4>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff f884 	bl	8001ad8 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7ff f880 	bl	8001ad8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1ec      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1c0      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4939      	ldr	r1, [pc, #228]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	e03a      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7ff f839 	bl	8001ad8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7ff f835 	bl	8001ad8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1a1      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4927      	ldr	r1, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff f818 	bl	8001ad8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7ff f814 	bl	8001ad8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e180      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03a      	beq.n	8002b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fff8 	bl	8001ad8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fff4 	bl	8001ad8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e160      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fad0 	bl	80030b0 <RCC_Delay>
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fe ffde 	bl	8001ad8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe ffda 	bl	8001ad8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e146      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	42420000 	.word	0x42420000
 8002b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e9      	bne.n	8002b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a6 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a87      	ldr	r2, [pc, #540]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b82      	ldr	r3, [pc, #520]	; (8002d90 <HAL_RCC_OscConfig+0x4c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x4c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7e      	ldr	r2, [pc, #504]	; (8002d90 <HAL_RCC_OscConfig+0x4c8>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe ff9b 	bl	8001ad8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe ff97 	bl	8001ad8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e103      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x4c8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x312>
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e02d      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002be2:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a69      	ldr	r2, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x356>
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a60      	ldr	r2, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a5a      	ldr	r2, [pc, #360]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a57      	ldr	r2, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe ff4b 	bl	8001ad8 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe ff47 	bl	8001ad8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0b1      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCC_OscConfig+0x37e>
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe ff35 	bl	8001ad8 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe ff31 	bl	8001ad8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e09b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9a:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8087 	beq.w	8002dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d061      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d146      	bne.n	8002d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCC_OscConfig+0x4cc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe ff05 	bl	8001ad8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe ff01 	bl	8001ad8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e06d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d108      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4921      	ldr	r1, [pc, #132]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a19      	ldr	r1, [r3, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	491b      	ldr	r1, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fed5 	bl	8001ad8 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fed1 	bl	8001ad8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e03d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46a>
 8002d50:	e035      	b.n	8002dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe febe 	bl	8001ad8 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe feba 	bl	8001ad8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e026      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x498>
 8002d7e:	e01e      	b.n	8002dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e019      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x500>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000

08002dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0d0      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4965      	ldr	r1, [pc, #404]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d040      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d115      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e073      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06b      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4936      	ldr	r1, [pc, #216]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fe0c 	bl	8001ad8 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe fe08 	bl	8001ad8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e053      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d210      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4922      	ldr	r1, [pc, #136]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f821 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1cc>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fd6a 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08003d54 	.word	0x08003d54
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fce:	e027      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd2:	613b      	str	r3, [r7, #16]
      break;
 8002fd4:	e027      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0c5b      	lsrs	r3, r3, #17
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <HAL_RCC_GetSysClockFreq+0x98>)
 8003002:	fb03 f202 	mul.w	r2, r3, r2
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e004      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	613b      	str	r3, [r7, #16]
      break;
 800301e:	e002      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003022:	613b      	str	r3, [r7, #16]
      break;
 8003024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003026:	693b      	ldr	r3, [r7, #16]
}
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	00f42400 	.word	0x00f42400
 800303c:	08003d6c 	.word	0x08003d6c
 8003040:	08003d7c 	.word	0x08003d7c
 8003044:	003d0900 	.word	0x003d0900
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <HAL_RCC_GetHCLKFreq+0x10>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff2 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08003d64 	.word	0x08003d64

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffde 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	0adb      	lsrs	r3, r3, #11
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08003d64 	.word	0x08003d64

080030b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <RCC_Delay+0x34>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <RCC_Delay+0x38>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0a5b      	lsrs	r3, r3, #9
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030cc:	bf00      	nop
  }
  while (Delay --);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	60fa      	str	r2, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f9      	bne.n	80030cc <RCC_Delay+0x1c>
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	20000000 	.word	0x20000000
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e076      	b.n	80031ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f9ea 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1a      	lsrs	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 0204 	and.w	r2, r2, #4
 80031ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_SPI_Transmit+0x22>
 8003212:	2302      	movs	r3, #2
 8003214:	e12d      	b.n	8003472 <HAL_SPI_Transmit+0x27e>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800321e:	f7fe fc5b 	bl	8001ad8 <HAL_GetTick>
 8003222:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d002      	beq.n	800323a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003234:	2302      	movs	r3, #2
 8003236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003238:	e116      	b.n	8003468 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_SPI_Transmit+0x52>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800324a:	e10d      	b.n	8003468 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	d10f      	bne.n	80032b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d007      	beq.n	80032d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032da:	d14f      	bne.n	800337c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_SPI_Transmit+0xf6>
 80032e4:	8afb      	ldrh	r3, [r7, #22]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d142      	bne.n	8003370 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800330e:	e02f      	b.n	8003370 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d112      	bne.n	8003344 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	86da      	strh	r2, [r3, #54]	; 0x36
 8003342:	e015      	b.n	8003370 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003344:	f7fe fbc8 	bl	8001ad8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d803      	bhi.n	800335c <HAL_SPI_Transmit+0x168>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d102      	bne.n	8003362 <HAL_SPI_Transmit+0x16e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800336e:	e07b      	b.n	8003468 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ca      	bne.n	8003310 <HAL_SPI_Transmit+0x11c>
 800337a:	e050      	b.n	800341e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_SPI_Transmit+0x196>
 8003384:	8afb      	ldrh	r3, [r7, #22]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d144      	bne.n	8003414 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033b0:	e030      	b.n	8003414 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d113      	bne.n	80033e8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033e6:	e015      	b.n	8003414 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e8:	f7fe fb76 	bl	8001ad8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d803      	bhi.n	8003400 <HAL_SPI_Transmit+0x20c>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Transmit+0x212>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003412:	e029      	b.n	8003468 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1c9      	bne.n	80033b2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa62 	bl	80038ec <SPI_EndRxTxTransaction>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e003      	b.n	8003468 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003470:	7ffb      	ldrb	r3, [r7, #31]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08c      	sub	sp, #48	; 0x30
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x26>
 800349c:	2302      	movs	r3, #2
 800349e:	e198      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x358>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a8:	f7fe fb16 	bl	8001ad8 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d00f      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x70>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d0:	d107      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_SPI_TransmitReceive+0x68>
 80034da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034e8:	e16d      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x82>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x82>
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d103      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003502:	e160      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b04      	cmp	r3, #4
 800350e:	d003      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2205      	movs	r2, #5
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	887a      	ldrh	r2, [r7, #2]
 800352e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d007      	beq.n	800356c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003574:	d17c      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_SPI_TransmitReceive+0x10a>
 800357e:	8b7b      	ldrh	r3, [r7, #26]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d16a      	bne.n	800365a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a8:	e057      	b.n	800365a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d11b      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x176>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x176>
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d113      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d119      	bne.n	8003632 <HAL_SPI_TransmitReceive+0x1b8>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d014      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362e:	2301      	movs	r3, #1
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003632:	f7fe fa51 	bl	8001ad8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800363e:	429a      	cmp	r2, r3
 8003640:	d80b      	bhi.n	800365a <HAL_SPI_TransmitReceive+0x1e0>
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d007      	beq.n	800365a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003658:	e0b5      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1a2      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x130>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d19d      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x130>
 800366e:	e080      	b.n	8003772 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_SPI_TransmitReceive+0x204>
 8003678:	8b7b      	ldrh	r3, [r7, #26]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d16f      	bne.n	800375e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a4:	e05b      	b.n	800375e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d11c      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x274>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x274>
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d114      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d119      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x2b6>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d014      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800372c:	2301      	movs	r3, #1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003730:	f7fe f9d2 	bl	8001ad8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373c:	429a      	cmp	r2, r3
 800373e:	d803      	bhi.n	8003748 <HAL_SPI_TransmitReceive+0x2ce>
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d102      	bne.n	800374e <HAL_SPI_TransmitReceive+0x2d4>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800375c:	e033      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d19e      	bne.n	80036a6 <HAL_SPI_TransmitReceive+0x22c>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d199      	bne.n	80036a6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f8b8 	bl	80038ec <SPI_EndRxTxTransaction>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800378e:	e01a      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037bc:	e003      	b.n	80037c6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037ec:	f7fe f974 	bl	8001ad8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037fc:	f7fe f96c 	bl	8001ad8 <HAL_GetTick>
 8003800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	015b      	lsls	r3, r3, #5
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003812:	e054      	b.n	80038be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d050      	beq.n	80038be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800381c:	f7fe f95c 	bl	8001ad8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	429a      	cmp	r2, r3
 800382a:	d902      	bls.n	8003832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d13d      	bne.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384a:	d111      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003854:	d004      	beq.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d107      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d10f      	bne.n	800389a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e017      	b.n	80038de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d19b      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000

080038ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff ff6a 	bl	80037dc <SPI_WaitFlagStateUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e000      	b.n	8003920 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e042      	b.n	80039c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd ff86 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f91d 	bl	8003bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d16d      	bne.n	8003ac4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Transmit+0x2c>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e066      	b.n	8003ac6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a06:	f7fe f867 	bl	8001ad8 <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	d108      	bne.n	8003a34 <HAL_UART_Transmit+0x6c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e003      	b.n	8003a3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a3c:	e02a      	b.n	8003a94 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f840 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e036      	b.n	8003ac6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3302      	adds	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e007      	b.n	8003a86 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1cf      	bne.n	8003a3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f810 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b090      	sub	sp, #64	; 0x40
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	e050      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d04c      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
 8003aee:	f7fd fff3 	bl	8001ad8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d241      	bcs.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b52:	623a      	str	r2, [r7, #32]
 8003b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e00f      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d09f      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3740      	adds	r7, #64	; 0x40
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003be6:	f023 030c 	bic.w	r3, r3, #12
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <UART_SetConfig+0x114>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d103      	bne.n	8003c1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7ff fa38 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	e002      	b.n	8003c22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7ff fa20 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8003c20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <UART_SetConfig+0x118>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	0119      	lsls	r1, r3, #4
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <UART_SetConfig+0x118>)
 8003c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2064      	movs	r0, #100	; 0x64
 8003c62:	fb00 f303 	mul.w	r3, r0, r3
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	3332      	adds	r3, #50	; 0x32
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <UART_SetConfig+0x118>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	4419      	add	r1, r3
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <UART_SetConfig+0x118>)
 8003c92:	fba3 0302 	umull	r0, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2064      	movs	r0, #100	; 0x64
 8003c9a:	fb00 f303 	mul.w	r3, r0, r3
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	3332      	adds	r3, #50	; 0x32
 8003ca4:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <UART_SetConfig+0x118>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <memset>:
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4402      	add	r2, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	2600      	movs	r6, #0
 8003cdc:	4d0c      	ldr	r5, [pc, #48]	; (8003d10 <__libc_init_array+0x38>)
 8003cde:	4c0d      	ldr	r4, [pc, #52]	; (8003d14 <__libc_init_array+0x3c>)
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	f000 f828 	bl	8003d3c <_init>
 8003cec:	2600      	movs	r6, #0
 8003cee:	4d0a      	ldr	r5, [pc, #40]	; (8003d18 <__libc_init_array+0x40>)
 8003cf0:	4c0a      	ldr	r4, [pc, #40]	; (8003d1c <__libc_init_array+0x44>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08003d80 	.word	0x08003d80
 8003d14:	08003d80 	.word	0x08003d80
 8003d18:	08003d80 	.word	0x08003d80
 8003d1c:	08003d84 	.word	0x08003d84

08003d20 <memcpy>:
 8003d20:	440a      	add	r2, r1
 8003d22:	4291      	cmp	r1, r2
 8003d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d28:	d100      	bne.n	8003d2c <memcpy+0xc>
 8003d2a:	4770      	bx	lr
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d32:	4291      	cmp	r1, r2
 8003d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d38:	d1f9      	bne.n	8003d2e <memcpy+0xe>
 8003d3a:	bd10      	pop	{r4, pc}

08003d3c <_init>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr

08003d48 <_fini>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr
